#!/usr/bin/env ys-0

defn main(input-file):
  data =: load(input-file.abspath())

  doc-type =: data.meta.doc-type

  say: +"generate-${doc-type}-markdown".symbol().resolve().call(data)
  # TODO call should convert string to function
  # say: call("generate-${doc-type}-markdown" data)

defn generate-library-markdown(data):
  meta =: data.meta
  data =: dissoc(data "meta")
  markdown =: |
    ---
    title: $(meta.title)
    ---

  loop [pairs data.seq() markdown markdown]:
    +[pair & pairs] =: pairs
    if pair:
      then:
        +[key val] =: pair
        markdown +=: "\n"
        markdown +=:
          cond:
            (key = 'text'): val
            :else:
              str:
                =>: "\n## $key\n"
                cond:
                  string?(val): val
                  vector?(val): format-sections(val)
                  nil?(val): ""
                  =>: ""
        recur: pairs markdown

      else: markdown

defn format-sections(sections):
  markdown =: ""
  loop [sections sections markdown markdown]:
    +[section & sections] =: sections
    if section:
      then:
        markdown +=: format-section(section)
        recur: sections markdown
      else: markdown

defn format-section(section):
  cond:
    section.func: format-function(section)
    =>: die("Don't know how to format '$section'")

defn indent(text):
  replace text: /(?m)^/ '  '

defn format-function(val):
  +{:strs [func desc more]} =: val
  +[name args retn] =: func
  markdown =: |

    * $name â€” $desc

  markdown +=:
    when more: |2

        <details><summary><strong>More</strong></summary>
      $(more.chomp().indent())
        </details>

  =>: markdown

# vim: ft=yaml sw=2 lisp:
