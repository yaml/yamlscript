# Copyright 2023-2025 Ingy dot Net
# This code is licensed under MIT license (See License for details)

- name: require simple library
  yamlscript: |
    !yamlscript/v0
    require: foo::bar
  clojure: |
    (require 'foo.bar)


- name: require simple library with nil pair value
  yamlscript: |
    !yamlscript/v0
    require foo::bar:
  clojure: |
    (require 'foo.bar)


- name: require library with alias
  yamlscript: |
    !yamlscript/v0
    require foo::bar: => fb
  clojure: |
    (require '[foo.bar :as fb])


- name: require one-part library with alias
  yamlscript: |
    !yamlscript/v0
    require foo: => f
  clojure: |
    (require '[foo :as f])


- name: require one-part library with alias
  yamlscript: |
    !yamlscript/v0
    require:
      foo: => f
      bar: => b
  clojure: |
    (require '[foo :as f] '[bar :as b])


- name: Transform require and cond
  yamlscript: |
    !yamlscript/v0
    require foo::bar: => fb
    cond:
      (x == 1): "one"
      (x == 2): "two"
      else: "other"
  clojure: |
    (require '[foo.bar :as fb])
    (cond (= x 1) "one" (= x 2) "two" :else "other")


- name: Various require transformations
  yamlscript: |
    !yamlscript/v0
    require foo::aaa: => fa
    require foo::bbb: one
    require foo::ccc: one two
    require foo::ddd:
      => fd
      one two
  clojure: |
    (require '[foo.aaa :as fa])
    (require '[foo.bbb :refer [one]])
    (require '[foo.ccc :refer [one two]])
    (require '[foo.ddd :as fd :refer [one two]])


- name: Various require transformations in one pair
  yamlscript: |
    !yamlscript/v0
    require:
      foo::aaa: => fa
      foo::bbb: one
      foo::ccc: one two
      foo::ddd:
        => fd
        one two
      foo::eee:
      foo::fff: :all
  clojure: |
    (require
      '[foo.aaa :as fa]
      '[foo.bbb :refer [one]]
      '[foo.ccc :refer [one two]]
      '[foo.ddd :as fd :refer [one two]]
      'foo.eee
      '[foo.fff :refer :all])


- name: 'require ns: :all'
  yamlscript: |
    !yamlscript/v0
    require foo::bar: :all
  clojure: |
    (require '[foo.bar :refer :all])


- name: Anonymous function with name
  yamlscript: |
    !yamlscript/v0
    fn add(a b): a + b
  clojure: |
    (fn add [a b] (add+ a b))


- name: Multi-arity anonymous function with name
  yamlscript: |
    !yamlscript/v0
    fn add:
      (): 0
      (a b): a + b
  clojure: |
    (fn add (() 0) ((a b) (add+ a b)))


- name: Keywords then and else for if
  yamlscript: |
    !yamlscript/v0
    if (x == 1):
      then:
        a: b
        c: d
      else:
        e: f
  clojure: |
    (if (= x 1) (do (a b) (c d)) (e f))


- name: Keywords then and else for if with scalar actions
  yamlscript: |
    !yamlscript/v0
    if (x == 1):
      then: a(b)
      else:
        c: d
        e: f
  clojure: |
    (if (= x 1) (a b) (do (c d) (e f)))


- name: Using else without then
  yamlscript: |
    !yamlscript/v0
    if (x == 1):
      a: b
      else: c
  clojure: |
    (if (= x 1) (a b) c)


- name: Using else without then for if-not
  yamlscript: |
    !yamlscript/v0
    if-not (x == 1):
      a: b
      else: c
  clojure: |
    (if-not (= x 1) (a b) c)


- name: Using then without else
  yamlscript: |
    !yamlscript/v0
    if (x == 1):
      then: a(b)
  error: |
    Invalid 'if' form


- name: Error when using then and not else
  yamlscript: |
    !yamlscript/v0
    if (x == 1):
      then: a(b)
      =>:
        c: d
        e: f
  error: |
    Form after 'then' must be 'else'


- name: Support vector destructuring in bindings with *xs
  yamlscript: |
    !yamlscript/v0
    for [x *xs] lst:
      a: b
  clojure: |
    (for [[x & xs] lst] (a b))


- name: Support vector destructuring if def
  yamlscript: |
    !yamlscript/v0
    defn foo():
      -[x *y] =: z
  clojure: |
    (defn foo [] (let [[x & y] z]))
