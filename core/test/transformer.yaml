# Copyright 2023-2024 Ingy dot Net
# This code is licensed under MIT license (See License for details)

- name: require simple library
  yamlscript: |
    !yamlscript/v0
    require: foo::bar
  clojure: |
    (require 'foo.bar)


- name: require simple library with nil pair value
  yamlscript: |
    !yamlscript/v0
    require foo::bar:
  clojure: |
    (require 'foo.bar)


- name: require library with alias
  yamlscript: |
    !yamlscript/v0
    require foo::bar: => fb
  clojure: |
    (require '[foo.bar :as fb])


- name: Transform require and cond
  yamlscript: |
    !yamlscript/v0
    require foo::bar: => fb
    cond:
      (x = 1): "one"
      (x = 2): "two"
      =>: "other"
  clojure: |
    (require '[foo.bar :as fb])
    (cond (= x 1) "one" (= x 2) "two" :else "other")


- name: Various require transformations
  yamlscript: |
    !yamlscript/v0
    require foo::aaa: => fa
    require foo::bbb: one
    require foo::ccc: one two
    require foo::ddd:
      => fd
      one two
  clojure: |
    (require '[foo.aaa :as fa])
    (require '[foo.bbb :refer [one]])
    (require '[foo.ccc :refer [one two]])
    (require '[foo.ddd :as fd :refer [one two]])


- name: Various require transformations in one pair
  yamlscript: |
    !yamlscript/v0
    require:
      foo::aaa: => fa
      foo::bbb: one
      foo::ccc: one two
      foo::ddd:
        => fd
        one two
      foo::eee:
      foo::fff: :all
  clojure: |
    (require
      '[foo.aaa :as fa]
      '[foo.bbb :refer [one]]
      '[foo.ccc :refer [one two]]
      '[foo.ddd :as fd :refer [one two]]
      'foo.eee
      '[foo.fff :refer :all])


- name: Anonymous function with name
  yamlscript: |
    !yamlscript/v0
    fn add(a b): a + b
  clojure: |
    (fn add [a b] (_+ a b))


- name: Multi-arity anonymous function with name
  yamlscript: |
    !yamlscript/v0
    fn add:
      (): 0
      (a b): a + b
  clojure: |
    (fn add (() 0) ((a b) (_+ a b)))
