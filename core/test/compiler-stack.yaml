# Copyright 2023-2024 Ingy dot Net
# This code is licensed under MIT license (See License for details)

- name: Test label / description
    # Each test block defines a set of test cases.
    # A test file usually require 1 input and 1 output field.
    # For instance parser_test.clj requires a yamlscript and a parse field.
    # A test block need not specify all fields for every test file.
  yamlscript: |
    # YAMScript code compilation input
  parse: |
    # YAML Parser events
  compose: |
    # YAML Composer tree
  resolve: |
    # Composed tree with tags resolved
  build: |
    # Read each !expr scalar into Clojure AST forms
  transform: |
    # Transform the YS macros (defsyn)
  construct: |
    # Construct a full Clojure AST
  print: |
    # Clojure code compilation output
  TEMPLATE: true
    # 'TEMPLATE: true' is here to ignore this test block


- name: Most YAML syntax forms in one example
  yamlscript: |
    --- !yamlscript/v0
    a: 'b'
    "c": |
      d
    ? "e
      f"
    : - {g: !h &i j}
      - [*k, [l]]
  parse: |
    "+MAP", :! "yamlscript/v0"
    "=VAL", := "a"
    "=VAL", :' "b"
    "=VAL", :$ "c"
    "=VAL", :| "d\n"
    "=VAL", :$ "e f"
    "+SEQ"
    "+MAP", :flow true
    "=VAL", := "g"
    "=VAL", :& "i", :! "h", := "j"
    "-MAP"
    "+SEQ", :flow true
    "=ALI", :* "k"
    "+SEQ", :flow true
    "=VAL", := "l"
    "-SEQ"
    "-SEQ"
    "-SEQ"
    "-MAP"
  compose: |
    {:! "yamlscript/v0",
     :%
     [{:= "a"}
      {:' "b"}
      {:$ "c"}
      {:| "d\n"}
      {:$ "e f"}
      {:-
       [{:%% [{:= "g"} {:& "i", :! "h", := "j"}]}
        {:-- [{:* "k"} {:-- [{:= "l"}]}]}]}]}


- name: Nested parse events test
  yamlscript: |
    a:
      b:
        c: d
      e: f
    g: h
  parse: |
    "+MAP"
    "=VAL", := "a"
    "+MAP"
    "=VAL", := "b"
    "+MAP"
    "=VAL", := "c"
    "=VAL", := "d"
    "-MAP"
    "=VAL", := "e"
    "=VAL", := "f"
    "-MAP"
    "=VAL", := "g"
    "=VAL", := "h"
    "-MAP"


- name: Basic function call with 2 args (test all phases)
  yamlscript: |
    --- !yamlscript/v0
    a: b c
  parse: |
    "+MAP", :! "yamlscript/v0"
    "=VAL", := "a"
    "=VAL", := "b c"
    "-MAP"
  compose: |
    {:! "yamlscript/v0", :% [
      {:= "a"} {:= "b c"} ]}
  resolve: |
    {:xmap [
      {:expr "a"}
      {:expr "b c"}
    ]}
  build: |
    {:xmap [
      {:Sym a}
      [{:Sym b} {:Sym c}] ]}
  transform: |
    {:xmap [
      {:Sym a}
      [{:Sym b} {:Sym c}] ]}
  construct: |
    {:Top [{:Lst [ {:Sym a} {:Sym b} {:Sym c} ]}]}
  print: |
    (a b c)


- name: Dot escaping
  yamlscript: |
    --- !yamlscript/v0
    map inc: -[2 4 6 8]
  parse: |
    "+MAP", :! "yamlscript/v0"
    "=VAL", := "map inc"
    "=VAL", := "-[2 4 6 8]"
    "-MAP"
  compose: |
    {:! "yamlscript/v0" :% [
      {:= "map inc"}
      {:= "-[2 4 6 8]"} ]}
  print: |
    (map inc [2 4 6 8])


- name: YS reader forms
  yamlscript: |
    --- !yamlscript/v0
    prn: -["str" \\c 42 foo true false nil]
    prn: -{:a 1 :c 2 :b 3}
    prn: -"A longer string"
  build: |
    {:xmap [
     {:Sym prn}
     {:Vec
      [{:Str "str"}
       {:Chr c}
       {:Int 42}
       {:Sym foo}
       {:Bln true}
       {:Bln false}
       {:Nil nil} ]}
     {:Sym prn}
     {:Map
      [{:Key :a}
       {:Int 1}
       {:Key :c}
       {:Int 2}
       {:Key :b}
       {:Int 3} ]}
     {:Sym prn}
     {:Str "A longer string"} ]}
  print: |
    (prn ["str" \c 42 foo true false nil])
    (prn {:a 1, :c 2, :b 3})
    (prn "A longer string")


- name: Basic math ysexpr
  yamlscript: |
    --- !yamlscript/v0
    inc: (6 * 7)
  build: |
    {:xmap
     [{:Sym inc}
      {:Lst [{:Sym mul+} {:Int 6} {:Int 7}]}]}
  print: |
    (inc (mul+ 6 7))


- name: Function call ysexpr
  yamlscript: |
    --- !yamlscript/v0
    say: str("The number is:\ " inc(41))
  build: |
    {:xmap
     [{:Sym say}
      {:Lst
       [{:Sym str}
        {:Str "The number is: "}
        {:Lst [{:Sym inc} {:Int 41}]}]}]}
  print: |
    (say (str "The number is: " (inc 41)))


- name: def expression
  yamlscript: |
    !yamlscript/v0
    foo =: 123
  resolve: |
    {:xmap [{:def "foo ="} {:expr "123"}]}
  build: |
    {:xmap
     [[{:Sym def} {:Sym foo}]
     {:Int 123}]}
  print: |
    (def foo 123)


- name: defn expression
  yamlscript: |
    !yamlscript/v0
    defn foo(a b): (a + b)
  resolve: |
    {:xmap [{:defn "defn foo(a b)"} {:expr "(a + b)"}]}
  build: |
    {:xmap
     [[{:Sym defn} {:Sym foo} nil {:Vec [{:Sym a} {:Sym b}]}]
      {:Lst [{:Sym add+} {:Sym a} {:Sym b}]}]}
  print: |
    (defn foo [a b] (add+ a b))


- name: Structured defn expression
  yamlscript: |
    !yamlscript/v0
    defn foo(a b):
      add: a b
  build: |
    {:xmap
     [[{:Sym defn} {:Sym foo} nil {:Vec [{:Sym a} {:Sym b}]}]
      {:xmap
       [{:Sym add}
        [{:Sym a} {:Sym b}]]}]}
  print: |
    (defn foo [a b] (add a b))


- name: def/let expression
  yamlscript: |
    !yamlscript/v0
    foo =: 123
    defn bar(a b):
      c =: (a + b)
      =>: 2 * c
    bar: 10 20
  parse: |
    "+MAP", :! "yamlscript/v0"
    "=VAL", := "foo ="
    "=VAL", := "123"
    "=VAL", := "defn bar(a b)"
    "+MAP"
    "=VAL", := "c ="
    "=VAL", := "(a + b)"
    "=VAL", := "=>"
    "=VAL", := "2 * c"
    "-MAP"
    "=VAL", := "bar"
    "=VAL", := "10 20"
    "-MAP"
  compose: |
    {:! "yamlscript/v0" :% [
      {:= "foo ="}
      {:= "123"}
      {:= "defn bar(a b)"}
      {:% [
        {:= "c ="}
        {:= "(a + b)"}
        {:= "=>"}
        {:= "2 * c"} ]}
      {:= "bar"}
      {:= "10 20"} ]}
  resolve: |
    {:xmap [
      {:def "foo ="}
      {:expr "123"}
      {:defn "defn bar(a b)"}
      {:xmap [
        {:def "c ="}
        {:expr "(a + b)"}
        {:expr "=>"}
        {:expr "2 * c"} ]}
      {:expr "bar"}
      {:expr "10 20"} ]}
  build: |
    {:xmap
     ([{:Sym def} {:Sym foo}]
      {:Int 123}
      [{:Sym defn} {:Sym bar} nil {:Vec [{:Sym a} {:Sym b}]}]
      {:xmap
       ([{:Sym def} {:Sym c}]
        {:Lst [{:Sym add+} {:Sym a} {:Sym b}]}
        {:Sym =>}
        {:Lst [{:Sym mul+} {:Int 2} {:Sym c}]})}
      {:Sym bar}
      [{:Int 10} {:Int 20}])}
  print: |
    (def foo 123)
    (defn bar [a b] (let [c (add+ a b)] (mul+ 2 c)))
    (bar 10 20)


- name: The 'if' special form
  yamlscript: |
    !yamlscript/v0
    if (a > b):
      foo(a b)
      bar(a b)
  print: |
    (if (> a b) (foo a b) (bar a b))


- name: Top level scalar in data mode
  yamlscript: |
    (foo bar)
  parse: |
    "=VAL", := "(foo bar)"
  resolve: |
    {:str "(foo bar)"}
  print: |
    "(foo bar)"


- name: Top level scalar in code mode
  yamlscript: |
    !yamlscript/v0
    (foo bar)
  parse: |
    "=VAL", :! "yamlscript/v0", := "(foo bar)"
  resolve: |
    {:expr "(foo bar)"}
  print: |
    (foo bar)


- name: Top level comment eats following lines
  yamlscript: |
    !yamlscript/v0
    ; comment
    (foo bar)
  resolve: |
    {:expr "; comment (foo bar)"}
  parse: |
    "=VAL", :! "yamlscript/v0", := "; comment (foo bar)"
  # Semicolon comments are errors now


- name: Switch to code mode
  yamlscript: |
    !yamlscript/v0/data
    str: foo bar
    num: ! inc(41)
    bar: ! load("bar.yaml")
  resolve: |
    {:map
     [{:str "str"}
      {:str "foo bar"}
      {:str "num"}
      {:expr "inc(41)"}
      {:str "bar"}
      {:expr "load(\"bar.yaml\")"}]}
  build: |
    {:Map
     [{:Str "str"}
      {:Str "foo bar"}
      {:Str "num"}
      {:Lst [{:Sym inc} {:Int 41}]}
      {:Str "bar"}
      {:Lst [{:Sym load} {:Str "bar.yaml"}]}]}
  construct: |
    {:Top
     [{:Map
       [{:Str "str"}
        {:Str "foo bar"}
        {:Str "num"}
        {:Lst [{:Sym inc} {:Int 41}]}
        {:Str "bar"}
        {:Lst [{:Sym load} {:Str "bar.yaml"}]}]}]}
  print: |
    {"str" "foo bar", "num" (inc 41), "bar" (load "bar.yaml")}


- name: Shebang line with ys-0 implies !yamlscript/v0
  yamlscript: |
    #!/usr/bin/env ys-0

    say: "Hi"
  parse: |
    "+MAP", :! "yamlscript/v0"
    "=VAL", := "say"
    "=VAL", :$ "Hi"
    "-MAP"


- name: Shebang line with ys-0 and !yamlscript/... tag ignored
  yamlscript: |
    #!/usr/bin/env ys-0
    !yamlscript/v0/:
    say: "Hi"
  parse: |
    "+MAP", :! "yamlscript/v0/:"
    "=VAL", := "say"
    "=VAL", :$ "Hi"
    "-MAP"


- name: Double quoted string with escaped newline
  yamlscript: |
    #!/usr/bin/env ys-0
    x =: "a\nb"
    y =: ("c" + "d\ne")
  parse: |
    "+MAP", :! "yamlscript/v0"
    "=VAL", := "x ="
    "=VAL", :$ "a\nb"
    "=VAL", := "y ="
    "=VAL", := "(\"c\" + \"d\\ne\")"
    "-MAP"
  build: |
    {:xmap
     ([{:Sym def} {:Sym x}]
      {:Str "a\nb"}
      [{:Sym def} {:Sym y}]
      {:Lst [{:Sym add+} {:Str "c"} {:Str "d\ne"}]})}


- name: fn special form
  yamlscript: |
    !yamlscript/v0
    add =:
      fn(a b): a + b
  resolve: |
    {:xmap
     [{:def "add ="} {:xmap [{:fn "fn(a b)"} {:expr "a + b"}]}]}
  clojure: |
    (def add (fn [a b] (add+ a b)))


- name: Support '%:' for left/right grouping
  yamlscript: |
    !yamlscript/v0
    foo %:
      (a > b): c
      (a < d): e
      =>: f
  resolve: |
    {:xmap
     [{:expr "foo"}
      {:fmap
       [{:expr "(a > b)"}
        {:expr "c"}
        {:expr "(a < d)"}
        {:expr "e"}
        {:expr "=>"}
        {:expr "f"}]}]}
  construct: |
    {:Top
     [{:Lst
       [{:Sym foo}
        {:Lst [{:Sym >} {:Sym a} {:Sym b}]}
        {:Sym c}
        {:Lst [{:Sym <} {:Sym a} {:Sym d}]}
        {:Sym e}
        {:Sym f}]}]}
  print: |
    (foo (> a b) c (< a d) e f)


- name: Support default fn arguments
  yamlscript: |
    !yamlscript/v0
    defn foo(a b=42 c="OK"): -[c b a]
  build: |
    {:xmap
     [[{:Sym defn} {:Sym foo} nil]
      [{:Lst
        [{:Vec [{:Sym a} {:Sym b} {:Sym c}]}
         {:Vec [{:Sym c} {:Sym b} {:Sym a}]}]}
       {:Lst
        [{:Vec [{:Sym a} {:Sym b}]}
         {:Lst [{:Sym foo} {:Sym a} {:Sym b} {:Str "OK"}]}]}
       {:Lst
        [{:Vec [{:Sym a}]}
         {:Lst [{:Sym foo} {:Sym a} {:Int 42} {:Str "OK"}]}]}]]}
  construct: |
    {:Top
     [{:Lst
       [{:Sym defn}
        {:Sym foo}
        nil
        {:Lst
         [{:Vec [{:Sym a} {:Sym b} {:Sym c}]}
          {:Vec [{:Sym c} {:Sym b} {:Sym a}]}]}
        {:Lst
         [{:Vec [{:Sym a} {:Sym b}]}
          {:Lst [{:Sym foo} {:Sym a} {:Sym b} {:Str "OK"}]}]}
        {:Lst
         [{:Vec [{:Sym a}]}
          {:Lst [{:Sym foo} {:Sym a} {:Int 42} {:Str "OK"}]}]}]}]}
  print: |
    (defn
     foo
     ([a b c] [c b a])
     ([a b] (foo a b "OK"))
     ([a] (foo a 42 "OK")))


- name: All args have defaults
  yamlscript: |
    !yamlscript/v0
    defn foo(a=1 b=2 c=3): -[c b a]
  print: |
    (defn
     foo
     ([a b c] [c b a])
     ([a b] (foo a b 3))
     ([a] (foo a 2 3))
     ([] (foo 1 2 3)))


- name: Construct :Lst objects
  yamlscript: |
    !yamlscript/v0
    defn foo(a=1):
      say: a
  print: |
    (defn foo ([a] (say a)) ([] (foo 1)))


- name: Code preamble in data mode mapping
  yamlscript: |
    !yamlscript/v0/data
    =>:
      vars =: load('vars.yaml')
    foo:: vars.foo
  resolve: |
    {:map
     ({:expr "=>"}
      {:xmap [{:def "vars ="} {:expr "load('vars.yaml')"}]}
      {:str "foo"}
      {:expr "vars.foo"})}
  build: |
    {:Map
     [{:Sym =>}
      {:xmap
       [[{:Sym def} {:Sym vars}]
        {:Lst [{:Sym load} {:Str "vars.yaml"}]}]}
      {:Str "foo"}
      {:dot [{:Sym vars} {:QSym foo}]}]}
  transform: |
    {:xmap
     [[{:Sym def} {:Sym vars}]
      {:Lst [{:Sym load} {:Str "vars.yaml"}]}
      {:Sym =>}
      {:Map
       [{:Str "foo"}
        {:Lst [{:Sym get+} {:Sym vars} {:QSym foo}]}]}]}
  clojure: |
    (def vars (load "vars.yaml"))
    {"foo" (get+ vars 'foo)}


- name: Code preamble in data mode sequence
  yamlscript: |
    !yamlscript/v0/
    - =>:
        vars =: load('vars.yaml')
    - ! vars.foo
    - bar
  resolve: |
    {:seq
     ({:xmap
       [{:expr "=>"}
        {:xmap [{:def "vars ="} {:expr "load('vars.yaml')"}]}]}
      {:expr "vars.foo"}
      {:str "bar"})}
  transform: |
    {:xmap
     [[{:Sym def} {:Sym vars}]
      {:Lst [{:Sym load} {:Str "vars.yaml"}]}
      {:Sym =>}
      {:Vec
       [{:Lst [{:Sym get+} {:Sym vars} {:QSym foo}]}
        {:Str "bar"}]}]}
  clojure: |
    (def vars (load "vars.yaml"))
    [(get+ vars 'foo) "bar"]


- name: Anchors and aliases in bare mode
  yamlscript: |
    - &bar 42
    - *bar
  parse: |
     "+SEQ"
     "=VAL", :& "bar", := "42"
     "=ALI", :* "bar"
     "-SEQ"
  compose: |
    {:- [{:& "bar", := "42"} {:* "bar"}]}
  resolve: |
    {:seq ({:& "bar", :int "42"} {:ali "bar"})}
  build: |
    {:Vec [{:Int 42, :& "bar"} {:ali "bar"}]}
  transform: |
    {:Vec [{:Int 42, :& "bar"} {:ali "bar"}]}
  construct: |
    {:Top
     [{:Vec
       [{:Lst [{:Sym _&} {:Qts "bar"} {:Int 42}]}
        {:Lst [{:Sym _*} {:Qts "bar"}]}]}]}
  print: |
    [(_& 'bar 42) (_* 'bar)]
  clojure: |
    [(_& 'bar 42) (_* 'bar)]


- name: Anchors and aliases in code mode
  yamlscript: |
    &a 123
    --- !yamlscript/v0
    x =: *a
    y =:: *b
  clojure: |
    (_& 'a 123)
    (def x (_** 'a))
    (def y (_** 'b))


- name: Function tags in data mode
  yamlscript: |
    !yamlscript/v0/
    foo: !merge*:
    - foo: 1
    - bar: 2
  compose: |
    {:! "yamlscript/v0/",
     :%
     [{:= "foo"}
      {:! "merge*:",
       :-
       [{:% [{:= "foo"} {:= "1"}]} {:% [{:= "bar"} {:= "2"}]}]}]}
  resolve: |
    {:map
     [{:str "foo"}
      {:seq
       ({:map [{:str "foo"} {:int "1"}]}
        {:map [{:str "bar"} {:int "2"}]}),
       :! "merge*:"}]}
  build: |
    {:Map
     [{:Str "foo"}
      {:Vec
       [{:Map [{:Str "foo"} {:Int 1}]}
        {:Map [{:Str "bar"} {:Int 2}]}],
       :! "merge*:"}]}
  transform: |
    {:Map
     [{:Str "foo"}
      {:Vec
       [{:Map [{:Str "foo"} {:Int 1}]}
        {:Map [{:Str "bar"} {:Int 2}]}],
       :! "merge*:"}]}
  construct: |
    {:Top
     [{:Map
       [{:Str "foo"}
        {:Lst
         [{:Sym apply}
          {:Sym merge}
          {:Vec
           [{:Map [{:Str "foo"} {:Int 1}]}
            {:Map [{:Str "bar"} {:Int 2}]}]}]}]}]}
  clojure: |
    {"foo" (apply merge [{"foo" 1} {"bar" 2}])}


- name: Raw clojure mode with !clj
  yamlscript: |
    !yamlscript/v0
    =>: !clj |
      (defmacro qq [x]
        `(quote ~x))
    qq: (1 2 3)
  resolve: |
    {:xmap
     [{:expr "=>"}
      {:clj "(defmacro qq [x]\n  `(quote ~x))\n"}
      {:expr "qq"}
      {:expr "(1 2 3)"}]}
  clojure: |
    (defmacro
     qq
     [x]
     (clojure.core/seq
      (clojure.core/concat
       (clojure.core/list 'quote)
       (clojure.core/list x))))
    (qq (1 2 3))
