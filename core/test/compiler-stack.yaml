# Copyright 2023-2024 Ingy dot Net
# This code is licensed under MIT license (See License for details)

- name: Test label / description
    # Each test block defines a set of test cases.
    # A test file usually require 1 input and 1 output field.
    # For instance parser_test.clj requires a yamlscript and a parse field.
    # A test block need not specify all fields for every test file.
  yamlscript: |
    # YAMScript code compilation input
  parse: |
    # YAML Parser events
  compose: |
    # YAML Composer tree
  resolve: |
    # Composed tree with tags resolved
  build: |
    # Read each !expr scalar into Clojure AST forms
  transform: |
    # Transform the YS macros (defsyn)
  construct: |
    # Construct a full Clojure AST
  print: |
    # Clojure code compilation output
  TEMPLATE: true
    # 'TEMPLATE: true' is here to ignore this test block


- name: Most YAML syntax forms in one example
  yamlscript: |
    --- !yamlscript/v0
    a: 'b'
    "c": |
      d
    ? "e
      f"
    : - {g: !h &i j}
      - [*k, [l]]
  parse: |
    "+MAP", :! "yamlscript/v0"
    "=VAL", := "a"
    "=VAL", :' "b"
    "=VAL", :$ "c"
    "=VAL", :| "d\n"
    "=VAL", :$ "e f"
    "+SEQ"
    "+MAP", :flow true
    "=VAL", := "g"
    "=VAL", :& "i", :! "h", := "j"
    "-MAP"
    "+SEQ", :flow true
    "=ALI", :* "k"
    "+SEQ", :flow true
    "=VAL", := "l"
    "-SEQ"
    "-SEQ"
    "-SEQ"
    "-MAP"
  compose: |
    {:! "yamlscript/v0",
     :%
     [{:= "a"}
      {:' "b"}
      {:$ "c"}
      {:| "d\n"}
      {:$ "e f"}
      {:-
       [{:%% [{:= "g"} {:& "i", :! "h", := "j"}]}
        {:-- [{:* "k"} {:-- [{:= "l"}]}]}]}]}


- name: Nested parse events test
  yamlscript: |
    a:
      b:
        c: d
      e: f
    g: h
  parse: |
    "+MAP"
    "=VAL", := "a"
    "+MAP"
    "=VAL", := "b"
    "+MAP"
    "=VAL", := "c"
    "=VAL", := "d"
    "-MAP"
    "=VAL", := "e"
    "=VAL", := "f"
    "-MAP"
    "=VAL", := "g"
    "=VAL", := "h"
    "-MAP"


- name: Basic function call with 2 args (test all phases)
  yamlscript: |
    --- !yamlscript/v0
    a: b c
  parse: |
    "+MAP", :! "yamlscript/v0"
    "=VAL", := "a"
    "=VAL", := "b c"
    "-MAP"
  compose: |
    {:! "yamlscript/v0", :% [
      {:= "a"} {:= "b c"} ]}
  resolve: |
    {:xmap [
      {:expr "a"}
      {:expr "b c"}
    ]}
  build: |
    {:xmap [
      {:Sym a}
      [{:Sym b} {:Sym c}] ]}
  transform: |
    {:xmap [
      {:Sym a}
      [{:Sym b} {:Sym c}] ]}
  construct: |
    {:Top [{:Lst [ {:Sym a} {:Sym b} {:Sym c} ]}]}
  print: |
    (a b c)


- name: Dot escaping
  yamlscript: |
    --- !yamlscript/v0
    map inc: -[2 4 6 8]
  parse: |
    "+MAP", :! "yamlscript/v0"
    "=VAL", := "map inc"
    "=VAL", := "-[2 4 6 8]"
    "-MAP"
  compose: |
    {:! "yamlscript/v0" :% [
      {:= "map inc"}
      {:= "-[2 4 6 8]"} ]}
  print: |
    (map inc [2 4 6 8])


- name: YS reader forms
  yamlscript: |
    --- !yamlscript/v0
    prn: -["str" \\c 42 foo true false nil]
    prn: -{:a 1 :c 2 :b 3}
    prn: -"A longer string"
  build: |
    {:xmap [
     {:Sym prn}
     {:Vec
      [{:Str "str"}
       {:Chr c}
       {:Int 42}
       {:Sym foo}
       {:Bln true}
       {:Bln false}
       {:Nil nil} ]}
     {:Sym prn}
     {:Map
      [{:Key :a}
       {:Int 1}
       {:Key :c}
       {:Int 2}
       {:Key :b}
       {:Int 3} ]}
     {:Sym prn}
     {:Str "A longer string"} ]}
  print: |
    (prn ["str" \c 42 foo true false nil])
    (prn {:a 1, :c 2, :b 3})
    (prn "A longer string")


- name: Basic math ysexpr
  yamlscript: |
    --- !yamlscript/v0
    inc: (6 * 7)
  build: |
    {:xmap
     [{:Sym inc}
      {:Lst [{:Sym mul+} {:Int 6} {:Int 7}]}]}
  print: |
    (inc (mul+ 6 7))


- name: Function call ysexpr
  yamlscript: |
    --- !yamlscript/v0
    say: str("The number is:\ " inc(41))
  build: |
    {:xmap
     [{:Sym say}
      {:Lst
       [{:Sym str}
        {:Str "The number is: "}
        {:Lst [{:Sym inc} {:Int 41}]}]}]}
  print: |
    (say (str "The number is: " (inc 41)))


- name: def expression
  yamlscript: |
    !yamlscript/v0
    foo =: 123
  resolve: |
    {:xmap [{:def "foo ="} {:expr "123"}]}
  build: |
    {:xmap
     [[{:Sym def} {:Sym foo}]
     {:Int 123}]}
  print: |
    (def foo 123)


- name: defn expression
  yamlscript: |
    !yamlscript/v0
    defn foo(a b): (a + b)
  resolve: |
    {:xmap [{:defn "defn foo(a b)"} {:expr "(a + b)"}]}
  build: |
    {:xmap
     [[{:Sym defn} {:Sym foo} nil {:Vec [{:Sym a} {:Sym b}]}]
      {:Lst [{:Sym add+} {:Sym a} {:Sym b}]}]}
  print: |
    (defn foo [a b] (add+ a b))


- name: Structured defn expression
  yamlscript: |
    !yamlscript/v0
    defn foo(a b):
      add: a b
  build: |
    {:xmap
     [[{:Sym defn} {:Sym foo} nil {:Vec [{:Sym a} {:Sym b}]}]
      {:xmap
       [{:Sym add}
        [{:Sym a} {:Sym b}]]}]}
  print: |
    (defn foo [a b] (add a b))


- name: def/let expression
  yamlscript: |
    !yamlscript/v0
    foo =: 123
    defn bar(a b):
      c =: (a + b)
      =>: 2 * c
    bar: 10 20
  parse: |
    "+MAP", :! "yamlscript/v0"
    "=VAL", := "foo ="
    "=VAL", := "123"
    "=VAL", := "defn bar(a b)"
    "+MAP"
    "=VAL", := "c ="
    "=VAL", := "(a + b)"
    "=VAL", := "=>"
    "=VAL", := "2 * c"
    "-MAP"
    "=VAL", := "bar"
    "=VAL", := "10 20"
    "-MAP"
  compose: |
    {:! "yamlscript/v0" :% [
      {:= "foo ="}
      {:= "123"}
      {:= "defn bar(a b)"}
      {:% [
        {:= "c ="}
        {:= "(a + b)"}
        {:= "=>"}
        {:= "2 * c"} ]}
      {:= "bar"}
      {:= "10 20"} ]}
  resolve: |
    {:xmap [
      {:def "foo ="}
      {:expr "123"}
      {:defn "defn bar(a b)"}
      {:xmap [
        {:def "c ="}
        {:expr "(a + b)"}
        {:expr "=>"}
        {:expr "2 * c"} ]}
      {:expr "bar"}
      {:expr "10 20"} ]}
  build: |
    {:xmap
     ([{:Sym def} {:Sym foo}]
      {:Int 123}
      [{:Sym defn} {:Sym bar} nil {:Vec [{:Sym a} {:Sym b}]}]
      {:xmap
       ([{:Sym def} {:Sym c}]
        {:Lst [{:Sym add+} {:Sym a} {:Sym b}]}
        {:Sym =>}
        {:Lst [{:Sym mul+} {:Int 2} {:Sym c}]})}
      {:Sym bar}
      [{:Int 10} {:Int 20}])}
  print: |
    (def foo 123)
    (defn bar [a b] (let [c (add+ a b)] (mul+ 2 c)))
    (bar 10 20)


- name: The 'if' special form
  yamlscript: |
    !yamlscript/v0
    if (a > b):
      foo(a b)
      bar(a b)
  print: |
    (if (> a b) (foo a b) (bar a b))


- name: Top level scalar in data mode
  yamlscript: |
    (foo bar)
  parse: |
    "=VAL", := "(foo bar)"
  resolve: |
    {:str "(foo bar)"}
  print: |
    "(foo bar)"


- name: Top level scalar in code mode
  yamlscript: |
    !yamlscript/v0
    (foo bar)
  parse: |
    "=VAL", :! "yamlscript/v0", := "(foo bar)"
  resolve: |
    {:expr "(foo bar)"}
  print: |
    (foo bar)


- name: Top level comment eats following lines
  yamlscript: |
    !yamlscript/v0
    ; comment
    (foo bar)
  resolve: |
    {:expr "; comment (foo bar)"}
  parse: |
    "=VAL", :! "yamlscript/v0", := "; comment (foo bar)"
  # Semicolon comments are errors now


- name: Switch to code mode
  yamlscript: |
    !yamlscript/v0/data
    str: foo bar
    num: ! inc(41)
    bar: ! load("bar.yaml")
  resolve: |
    {:map
     [{:str "str"}
      {:str "foo bar"}
      {:str "num"}
      {:expr "inc(41)"}
      {:str "bar"}
      {:expr "load(\"bar.yaml\")"}]}
  build: |
    {:Map
     [{:Str "str"}
      {:Str "foo bar"}
      {:Str "num"}
      {:Lst [{:Sym inc} {:Int 41}]}
      {:Str "bar"}
      {:Lst [{:Sym load} {:Str "bar.yaml"}]}]}
  construct: |
    {:Top
     [{:Map
       [{:Str "str"}
        {:Str "foo bar"}
        {:Str "num"}
        {:Lst [{:Sym inc} {:Int 41}]}
        {:Str "bar"}
        {:Lst [{:Sym load} {:Str "bar.yaml"}]}]}]}
  print: |
    {"str" "foo bar", "num" (inc 41), "bar" (load "bar.yaml")}


- name: Deprecated data mode tag !yamlscript/v0/
  yamlscript: |
    !yamlscript/v0/
    str: foo bar
    num: ! inc(41)
  resolve: |
    {:map
     [{:str "str"}
      {:str "foo bar"}
      {:str "num"}
      {:expr "inc(41)"}]}


- name: Shebang line with ys-0 implies !yamlscript/v0
  yamlscript: |
    #!/usr/bin/env ys-0

    say: "Hi"
  parse: |
    "+MAP", :! "yamlscript/v0"
    "=VAL", := "say"
    "=VAL", :$ "Hi"
    "-MAP"


- name: Shebang line with ys-0 and !yamlscript/... tag ignored
  yamlscript: |
    #!/usr/bin/env ys-0
    !yamlscript/v0:
    say: "Hi"
  parse: |
    "+MAP", :! "yamlscript/v0:"
    "=VAL", := "say"
    "=VAL", :$ "Hi"
    "-MAP"


- name: Double quoted string with escaped newline
  yamlscript: |
    #!/usr/bin/env ys-0
    x =: "a\nb"
    y =: ("c" + "d\ne")
  parse: |
    "+MAP", :! "yamlscript/v0"
    "=VAL", := "x ="
    "=VAL", :$ "a\nb"
    "=VAL", := "y ="
    "=VAL", := "(\"c\" + \"d\\ne\")"
    "-MAP"
  build: |
    {:xmap
     ([{:Sym def} {:Sym x}]
      {:Str "a\nb"}
      [{:Sym def} {:Sym y}]
      {:Lst [{:Sym add+} {:Str "c"} {:Str "d\ne"}]})}


- name: fn special form
  yamlscript: |
    !yamlscript/v0
    add =:
      fn(a b): a + b
  resolve: |
    {:xmap
     [{:def "add ="} {:xmap [{:fn "fn(a b)"} {:expr "a + b"}]}]}
  clojure: |
    (def add (fn [a b] (add+ a b)))


- name: Support '%:' for left/right grouping
  yamlscript: |
    !yamlscript/v0
    foo %:
      (a > b): c
      (a < d): e
      =>: f
  resolve: |
    {:xmap
     [{:expr "foo"}
      {:fmap
       [{:expr "(a > b)"}
        {:expr "c"}
        {:expr "(a < d)"}
        {:expr "e"}
        {:expr "=>"}
        {:expr "f"}]}]}
  construct: |
    {:Top
     [{:Lst
       [{:Sym foo}
        {:Lst [{:Sym >} {:Sym a} {:Sym b}]}
        {:Sym c}
        {:Lst [{:Sym <} {:Sym a} {:Sym d}]}
        {:Sym e}
        {:Sym f}]}]}
  print: |
    (foo (> a b) c (< a d) e f)


- name: Support default fn arguments
  yamlscript: |
    !yamlscript/v0
    defn foo(a b=42 c="OK"): -[c b a]
  build: |
    {:xmap
     [[{:Sym defn} {:Sym foo} nil]
      [{:Lst
        [{:Vec [{:Sym a} {:Sym b} {:Sym c}]}
         {:Vec [{:Sym c} {:Sym b} {:Sym a}]}]}
       {:Lst
        [{:Vec [{:Sym a} {:Sym b}]}
         {:Lst [{:Sym foo} {:Sym a} {:Sym b} {:Str "OK"}]}]}
       {:Lst
        [{:Vec [{:Sym a}]}
         {:Lst [{:Sym foo} {:Sym a} {:Int 42} {:Str "OK"}]}]}]]}
  construct: |
    {:Top
     [{:Lst
       [{:Sym defn}
        {:Sym foo}
        nil
        {:Lst
         [{:Vec [{:Sym a} {:Sym b} {:Sym c}]}
          {:Vec [{:Sym c} {:Sym b} {:Sym a}]}]}
        {:Lst
         [{:Vec [{:Sym a} {:Sym b}]}
          {:Lst [{:Sym foo} {:Sym a} {:Sym b} {:Str "OK"}]}]}
        {:Lst
         [{:Vec [{:Sym a}]}
          {:Lst [{:Sym foo} {:Sym a} {:Int 42} {:Str "OK"}]}]}]}]}
  print: |
    (defn
     foo
     ([a b c] [c b a])
     ([a b] (foo a b "OK"))
     ([a] (foo a 42 "OK")))


- name: All args have defaults
  yamlscript: |
    !yamlscript/v0
    defn foo(a=1 b=2 c=3): -[c b a]
  print: |
    (defn
     foo
     ([a b c] [c b a])
     ([a b] (foo a b 3))
     ([a] (foo a 2 3))
     ([] (foo 1 2 3)))


- name: Construct :Lst objects
  yamlscript: |
    !yamlscript/v0
    defn foo(a=1):
      say: a
  print: |
    (defn foo ([a] (say a)) ([] (foo 1)))


- name: Code preamble in data mode mapping
  yamlscript: |
    !yamlscript/v0/data
    =>:
      vars =: load('vars.yaml')
    foo:: vars.foo
  resolve: |
    {:map
     ({:expr "=>"}
      {:xmap [{:def "vars ="} {:expr "load('vars.yaml')"}]}
      {:str "foo"}
      {:expr "vars.foo"})}
  build: |
    {:dmap
     [{:Sym =>}
      {:xmap
       [[{:Sym def} {:Sym vars}]
        {:Lst [{:Sym load} {:Str "vars.yaml"}]}]}
      {:Str "foo"}
      {:dot [{:Sym vars} {:QSym foo}]}]}
  transform: |
    {:xmap
     [[{:Sym def} {:Sym vars}]
      {:Lst [{:Sym load} {:Str "vars.yaml"}]}
      {:Sym =>}
      {:dmap
       [{:Str "foo"}
        {:Lst [{:Sym get+} {:Sym vars} {:QSym foo}]}]}]}
  clojure: |
    (def vars (load "vars.yaml"))
    {"foo" (get+ vars 'foo)}


- name: Code preamble in data mode sequence
  yamlscript: |
    !yamlscript/v0:
    - =>:
        vars =: load('vars.yaml')
    - ! vars.foo
    - bar
  resolve: |
    {:seq
     ({:xmap
       [{:expr "=>"}
        {:xmap [{:def "vars ="} {:expr "load('vars.yaml')"}]}]}
      {:expr "vars.foo"}
      {:str "bar"})}
  transform: |
    {:xmap
     [[{:Sym def} {:Sym vars}]
      {:Lst [{:Sym load} {:Str "vars.yaml"}]}
      {:Sym =>}
      {:Vec
       [{:Lst [{:Sym get+} {:Sym vars} {:QSym foo}]}
        {:Str "bar"}]}]}
  clojure: |
    (def vars (load "vars.yaml"))
    [(get+ vars 'foo) "bar"]


- name: Anchors and aliases in bare mode
  yamlscript: |
    - &bar 42
    - *bar
  parse: |
     "+SEQ"
     "=VAL", :& "bar", := "42"
     "=ALI", :* "bar"
     "-SEQ"
  compose: |
    {:- [{:& "bar", := "42"} {:* "bar"}]}
  resolve: |
    {:seq ({:& "bar", :int "42"} {:ali "bar"})}
  build: |
    {:Vec [{:Int 42, :& "bar"} {:ali "bar"}]}
  transform: |
    {:Vec [{:Int 42, :& "bar"} {:ali "bar"}]}
  construct: |
    {:Top
     [{:Vec
       [{:Lst [{:Sym _&} {:Qts "bar"} {:Int 42}]}
        {:Lst [{:Sym _*} {:Qts "bar"}]}]}]}
  print: |
    [(_& 'bar 42) (_* 'bar)]
  clojure: |
    [(_& 'bar 42) (_* 'bar)]


- name: Anchors and aliases in code mode
  yamlscript: |
    &a 123
    --- !yamlscript/v0
    x =: *a
    y =:: *b
  clojure: |
    (_& 'a 123)
    (def x (_** 'a))
    (def y (_** 'b))


- name: Function tags in data mode
  yamlscript: |
    !yamlscript/v0:
    foo: !:merge*
    - foo: 1
    - bar: 2
  compose: |
    {:! "yamlscript/v0:",
     :%
     [{:= "foo"}
      {:! ":merge*",
       :-
       [{:% [{:= "foo"} {:= "1"}]} {:% [{:= "bar"} {:= "2"}]}]}]}
  resolve: |
    {:map
     [{:str "foo"}
      {:seq
       ({:map [{:str "foo"} {:int "1"}]}
        {:map [{:str "bar"} {:int "2"}]}),
       :! ":merge*"}]}
  build: |
    {:Map
     [{:Str "foo"}
      {:Vec
       [{:Map [{:Str "foo"} {:Int 1}]}
        {:Map [{:Str "bar"} {:Int 2}]}],
       :! ":merge*"}]}
  transform: |
    {:Map
     [{:Str "foo"}
      {:Vec
       [{:Map [{:Str "foo"} {:Int 1}]}
        {:Map [{:Str "bar"} {:Int 2}]}],
       :! ":merge*"}]}
  construct: |
    {:Top
     [{:Map
       [{:Str "foo"}
        {:Lst
         [{:Sym apply}
          {:Sym merge}
          {:Vec
           [{:Map [{:Str "foo"} {:Int 1}]}
            {:Map [{:Str "bar"} {:Int 2}]}]}]}]}]}
  clojure: |
    {"foo" (apply merge [{"foo" 1} {"bar" 2}])}


- name: Raw clojure mode with !clj
  yamlscript: |
    !yamlscript/v0
    =>: !clj |
      (defmacro qq [x]
        `(quote ~x))
    qq: (1 2 3)
  resolve: |
    {:xmap
     [{:expr "=>"}
      {:clj "(defmacro qq [x]\n  `(quote ~x))\n"}
      {:expr "qq"}
      {:expr "(1 2 3)"}]}
  clojure: |
    (defmacro
     qq
     [x]
     (clojure.core/seq
      (clojure.core/concat
       (clojure.core/list 'quote)
       (clojure.core/list x))))
    (qq (1 2 3))


- name: Anchors in various contexts in bare mode
  yamlscript: |
    --- &map1
    a: &seq2
    - &map3
      b: &val4 c
  resolve: |
    {:map
     [{:str "a"}
      {:seq
       [{:map [{:str "b"} {:str "c" :& "val4"}], :& "map3"}]
       :& "seq2"}],
     :& "map1"}}
  clojure: |
    (_& 'map1 {"a" (_& 'seq2 [(_& 'map3 {"b" (_& 'val4 "c")})])})


- name: Anchors in various contexts in data mode
  yamlscript: |
    --- !yamlscript/v0: &map1
    a: &seq2
    - &map3
      b: &val4 c
  resolve: |
    {:map
     [{:str "a"}
      {:seq
       [{:map [{:str "b"} {:str "c" :& "val4"}], :& "map3"}]
       :& "seq2"}],
     :& "map1"}}
  clojure: |
    (_& 'map1 {"a" (_& 'seq2 [(_& 'map3 {"b" (_& 'val4 "c")})])})


- name: Anchors in various contexts in code mode
  yamlscript: |
    --- !yamlscript/v0 &map1
    a:: &seq2
    - ! &map3
      b: &expr4 c
  resolve: |
    {:xmap
     [{:expr "a"}
      {:seq
       ({:xmap [{:expr "b"} {:& "expr4", :expr "c"}],
         :& "map3"}),
       :& "seq2"}],
     :& "map1"}
  clojure: |
    (_& 'map1 (a (_& 'seq2 [(_& 'map3 (b (_& 'expr4 c)))])))


- name: 'Implicit !+merge: call tag in bare mode'
  yamlscript: |
    --- !yamlscript/v0/bare
    default: &default
      foo: 1
      bar: 2
    foo:
      <<: *default
      foo: 3
      baz: 4
  resolve: |
    {:map
     [{:str "default"}
      {:map [{:str "foo"} {:int "1"} {:str "bar"} {:int "2"}],
       :& "default"}
      {:str "foo"}
      {:map
       [{:key ":-<<"}
        {:ali "default"}
        {:str "foo"}
        {:int "3"}
        {:str "baz"}
        {:int "4"}],
       :! ":+merge"}]}
  clojure: |
    {"default" (_& 'default {"foo" 1, "bar" 2}),
      "foo" (+merge {:-<< (_* 'default), "foo" 3, "baz" 4})}


- name: Implicit merge-map call tag in data mode
  yamlscript: |
    --- !yamlscript/v0:
    default: &default
      foo: 1
      bar: 2
    foo:
      <<: *default
      foo: 3
      baz: 4
  resolve: |
    {:map
     [{:str "default"}
      {:map [{:str "foo"} {:int "1"} {:str "bar"} {:int "2"}],
       :& "default"}
      {:str "foo"}
      {:map
       [{:key ":-<<"}
        {:Ali "default"}
        {:str "foo"}
        {:int "3"}
        {:str "baz"}
        {:int "4"}],
       :! ":+merge"}]}
  clojure: |
    {"default" (_& 'default {"foo" 1, "bar" 2}),
      "foo" (+merge {:-<< (_** 'default), "foo" 3, "baz" 4})}


- name: Code assignment in data mode mapping
  yamlscript: |
    !yamlscript/v0/data
    foo: 1
    bar: 2
    x =: 6
    y =: 7
    baz:: x * y
    boom: 1999
    z =: 8
    bust: 2000
  resolve: |
    {:map
     [{:str "foo"}
      {:int "1"}
      {:str "bar"}
      {:int "2"}
      {:def "x ="}
      {:expr "6"}
      {:def "y ="}
      {:expr "7"}
      {:str "baz"}
      {:expr "x * y"}
      {:str "boom"}
      {:int "1999"}
      {:def "z ="}
      {:expr "8"}
      {:str "bust"}
      {:int "2000"}]}
  build: |
    {:dmap
     [{:Str "foo"}
      {:Int 1}
      {:Str "bar"}
      {:Int 2}
      [{:Sym def} {:Sym x} {:Int 6}]
      [{:Sym def} {:Sym y} {:Int 7}]
      {:Str "baz"}
      {:Lst [{:Sym mul+} {:Sym x} {:Sym y}]}
      {:Str "boom"}
      {:Int 1999}
      [{:Sym def} {:Sym z} {:Int 8}]
      {:Str "bust"}
      {:Int 2000}]}
  construct: |
    {:Top
     [{:Lst
       [{:Sym merge}
        {:Map [{:Str "foo"} {:Int 1} {:Str "bar"} {:Int 2}]}
        {:Lst
         [{:Sym let}
          {:Vec [{:Sym x} {:Int 6} {:Sym y} {:Int 7}]}
          {:Lst
           [{:Sym merge}
            {:Map
             [{:Str "baz"}
              {:Lst [{:Sym mul+} {:Sym x} {:Sym y}]}
              {:Str "boom"}
              {:Int 1999}]}
            {:Lst
             [{:Sym let}
              {:Vec [{:Sym z} {:Int 8}]}
              {:Map [{:Str "bust"} {:Int 2000}]}]}]}]}]}]}
  transform: |
    {:dmap
     [{:Str "foo"}
      {:Int 1}
      {:Str "bar"}
      {:Int 2}
      [{:Sym def} {:Sym x} {:Int 6}]
      [{:Sym def} {:Sym y} {:Int 7}]
      {:Str "baz"}
      {:Lst [{:Sym mul+} {:Sym x} {:Sym y}]}
      {:Str "boom"}
      {:Int 1999}
      [{:Sym def} {:Sym z} {:Int 8}]
      {:Str "bust"}
      {:Int 2000}]}
  clojure: |
    (merge
      {"foo" 1, "bar" 2}
      (let
       [x 6 y 7]
       (merge {"baz" (mul+ x y), "boom" 1999} (let [z 8] {"bust" 2000}))))


- name: Load yaml file in data map assignment
  yamlscript: |
    !yamlscript/v0:
    a: 1
    data =: slurp('data.yaml'):yaml/load
    b: 2
    c: data.foo
  resolve: |
    {:map
     [{:str "a"}
      {:int "1"}
      {:def "data ="}
      {:expr "slurp('data.yaml'):yaml/load"}
      {:str "b"}
      {:int "2"}
      {:str "c"}
      {:str "data.foo"}]}
  build: |
    {:dmap
     [{:Str "a"}
      {:Int 1}
      [{:Sym def}
       {:Sym data}
       {:dot
        [{:Lst [{:Sym slurp} {:Str "data.yaml"}]}
         {:Lst [{:Sym yaml/load}]}]}]
      {:Str "b"}
      {:Int 2}
      {:Str "c"}
      {:Str "data.foo"}]}
  transform: |
    {:dmap
     ({:Str "a"}
      {:Int 1}
      [{:Sym def}
       {:Sym data}
       {:Lst
        [{:Sym yaml/load}
         {:Lst [{:Sym slurp} {:Str "data.yaml"}]}]}]
      {:Str "b"}
      {:Int 2}
      {:Str "c"}
      {:Str "data.foo"})}
  construct: |
    {:Top
     [{:Lst
       [{:Sym merge}
        {:Map [{:Str "a"} {:Int 1}]}
        {:Lst
         [{:Sym let}
          {:Vec
           [{:Sym data}
            {:Lst
             [{:Sym yaml/load}
              {:Lst [{:Sym slurp} {:Str "data.yaml"}]}]}]}
          {:Map
           [{:Str "b"}
            {:Int 2}
            {:Str "c"}
            {:Str "data.foo"}]}]}]}]}
  clojure: |
    (merge
      {"a" 1}
      (let [data (yaml/load (slurp "data.yaml"))] {"b" 2, "c" "data.foo"}))


- name: Conditional pairs in data mode map
  yamlscript: |
    !yamlscript/v0:
    ::
      use: 'module1'
      use: 'module2'
    foo: the foo
    bar: the bar
    x =: rand(2)
    y =: x + 1
    ::
      when x > 1::
        aaa:: x * y
        bbb: 333
    baz: the baz

  resolve: |
    {:map
     [{:expr "=>"}
      {:xmap
       [{:expr "use"}
        {:str "module1"}
        {:expr "use"}
        {:str "module2"}]}
      {:str "foo"}
      {:str "the foo"}
      {:str "bar"}
      {:str "the bar"}
      {:def "x ="}
      {:expr "rand(2)"}
      {:def "y ="}
      {:expr "x + 1"}
      {:nil ""}
      {:xmap
       [{:expr "when x > 1"}
        {:map
         [{:str "aaa"}
          {:expr "x * y"}
          {:str "bbb"}
          {:int "333"}]}]}
      {:str "baz"}
      {:str "the baz"}]}
  build: |
    {:dmap
     [{:Sym =>}
      {:xmap
       [{:Sym use} {:Str "module1"} {:Sym use} {:Str "module2"}]}
      {:Str "foo"}
      {:Str "the foo"}
      {:Str "bar"}
      {:Str "the bar"}
      [{:Sym def} {:Sym x} {:Lst [{:Sym rand} {:Int 2}]}]
      [{:Sym def}
       {:Sym y}
       {:Lst [{:Sym add+} {:Sym x} {:Int 1}]}]
      [{:xmap
        [[{:Sym when} {:Sym x} {:Sym >} {:Int 1}]
         {:Map
          [{:Str "aaa"}
           {:Lst [{:Sym mul+} {:Sym x} {:Sym y}]}
           {:Str "bbb"}
           {:Int 333}]}]}]
      {:Str "baz"}
      {:Str "the baz"}]}
  transform: |
    {:xmap
     [{:Sym use}
      {:Str "module1"}
      {:Sym use}
      {:Str "module2"}
      {:Sym =>}
      {:dmap
       ({:Str "foo"}
        {:Str "the foo"}
        {:Str "bar"}
        {:Str "the bar"}
        [{:Sym def} {:Sym x} {:Lst [{:Sym rand} {:Int 2}]}]
        [{:Sym def}
         {:Sym y}
         {:Lst [{:Sym add+} {:Sym x} {:Int 1}]}]
        [{:xmap
          [[{:Sym when} {:Lst [{:Sym >} {:Sym x} {:Int 1}]}]
           {:Map
            [{:Str "aaa"}
             {:Lst [{:Sym mul+} {:Sym x} {:Sym y}]}
             {:Str "bbb"}
             {:Int 333}]}]}]
        {:Str "baz"}
        {:Str "the baz"})}]}
  construct: |
    {:Top
     [{:Lst [{:Sym use} {:Str "module1"}]}
      {:Lst [{:Sym use} {:Str "module2"}]}
      {:Lst
       [{:Sym merge}
        {:Map
         [{:Str "foo"}
          {:Str "the foo"}
          {:Str "bar"}
          {:Str "the bar"}]}
        {:Lst
         [{:Sym let}
          {:Vec
           [{:Sym x}
            {:Lst [{:Sym rand} {:Int 2}]}
            {:Sym y}
            {:Lst [{:Sym add+} {:Sym x} {:Int 1}]}]}
          {:Lst
           [{:Sym merge}
            {:Lst
             [{:Sym when}
              {:Lst [{:Sym >} {:Sym x} {:Int 1}]}
              {:Map
               [{:Str "aaa"}
                {:Lst [{:Sym mul+} {:Sym x} {:Sym y}]}
                {:Str "bbb"}
                {:Int 333}]}]}
            {:Map [{:Str "baz"} {:Str "the baz"}]}]}]}]}]}
  clojure: |
    (use "module1")
    (use "module2")
    (+++
     (merge
      {"foo" "the foo", "bar" "the bar"}
      (let
       [x (rand 2) y (add+ x 1)]
       (merge
        (when (> x 1) {"aaa" (mul+ x y), "bbb" 333})
        {"baz" "the baz"}))))


- name: Conditional pair without other pairs
  yamlscript: |
    !yamlscript/v0:
    ::
      when x > 1::
        aaa: bbb
  clojure: |
    (when (> x 1) {"aaa" "bbb"})
    {}


- name: Conditional pair with multiple pairs value
  yamlscript: |
    !yamlscript/v0:
    x: 1
    ::
      say: 'one'
      say: 'two'
      =>::
        y: 2
    z: 3
  clojure: |
    (merge {"x" 1} (merge (do (say "one") (say "two") {"y" 2}) {"z" 3}))


- name: Conditional pair with non-mapping value
  yamlscript: |
    !yamlscript/v0:
    x: 1
    :: foo(a 3)
    y: 2
  build: |
    {:dmap
     [{:Str "x"}
      {:Int 1}
      [{:Lst [{:Sym foo} {:Sym a} {:Int 3}]}]
      {:Str "y"}
      {:Int 2}]}
  construct: |
    {:Top
     [{:Lst
       [{:Sym merge}
        {:Map [{:Str "x"} {:Int 1}]}
        {:Lst
         [{:Sym merge}
          {:Lst [{:Sym foo} {:Sym a} {:Int 3}]}
          {:Map [{:Str "y"} {:Int 2}]}]}]}]}
  clojure: |
    (merge {"x" 1} (merge (foo a 3) {"y" 2}))


- name: Conditional pair dmap in dmap
  yamlscript: |
    --- !yamlscript/v0:
    :: foo()
    a:
      :: bar()
  resolve: |
    {:map
     ({:expr "=>"}
      {:expr "foo()"}
      {:str "a"}
      {:map [{:nil ""} {:expr "bar()"}]})}
  transform: |
    {:xmap
     [{:Sym =>}
      {:Lst [{:Sym foo}]}
      {:Sym =>}
      {:dmap [{:Str "a"} {:dmap ([{:Lst [{:Sym bar}]}])}]}]}
  construct: |
    {:Top
     [{:Lst [{:Sym foo}]}
      {:Map [{:Str "a"} {:Lst [{:Sym bar}]}]}]}
  clojure: |
    (foo)
    {"a" (bar)}


- name: Conditional pair in sequence
  yamlscript: |
    --- !yamlscript/v0:
    a:
    - b: c
      :: foo()
    :: bar()
  resolve: |
    {:map
     [{:str "a"}
      {:seq
       ({:map
         [{:str "b"} {:str "c"} {:nil ""} {:expr "foo()"}]})}
      {:nil ""}
      {:expr "bar()"}]}
  build: |
    {:dmap
     [{:Str "a"}
      {:Vec
       [{:dmap [{:Str "b"} {:Str "c"} [{:Lst [{:Sym foo}]}]]}]}
      [{:Lst [{:Sym bar}]}]]}
  construct: |
    {:Top
     [{:Lst
       [{:Sym merge}
        {:Map
         [{:Str "a"}
          {:Vec
           [{:Lst
             [{:Sym merge}
              {:Map [{:Str "b"} {:Str "c"}]}
              {:Lst [{:Sym foo}]}]}]}]}
        {:Lst [{:Sym bar}]}]}]}
  clojure: |
    (merge {"a" [(merge {"b" "c"} (foo))]} (bar))


- name: Top level data mode mapping first pair has key '::'
  yamlscript: |
    !yamlscript/v0:
    ::
      use: 'module1'
      use: 'module2'
    x: 1
  resolve: |
    {:map
     ({:expr "=>"}
      {:xmap
       [{:expr "use"}
        {:str "module1"}
        {:expr "use"}
        {:str "module2"}]}
      {:str "x"}
      {:int "1"})}
  clojure: |
    (use "module1")
    (use "module2")
    {"x" 1}


- name: Shorthand syntax for conditionals in data mappings
  yamlscript: |
    !yamlscript/v0:
    :use module1:
    x: 1
    :when x > 1::
      y: 2
    :z: 3
  resolve: |
    {:map
     [{:expr ":use module1"}
      {:expr ""}
      {:str "x"}
      {:int "1"}
      {:expr ":when x > 1"}
      {:map [{:str "y"} {:int "2"}]}
      {:key ":z"}
      {:int "3"}]}
  build: |
    {:dmap
     [{:Sym =>}
      {:xmap [[{:Sym use} {:Sym module1}] nil]}
      {:Str "x"}
      {:Int 1}
      [{:xmap
        [[{:Sym when} {:Sym x} {:Sym >} {:Int 1}]
         {:Map [{:Str "y"} {:Int 2}]}]}]
      {:Key :z}
      {:Int 3}]}
  clojure: |
    (use module1)
    (merge {"x" 1} (merge (when (> x 1) {"y" 2}) {:z 3}))


- name: Shorthand syntax for conditionals in data mappings 2
  yamlscript: |
    !yamlscript/v0:
    :use module1:
    x: 1
  build: |
    {:dmap
     [{:Sym =>}
      {:xmap [[{:Sym use} {:Sym module1}] nil]}
      {:Str "x"}
      {:Int 1}]}
  clojure: |
    (use module1)
    {"x" 1}


- name: Shorthand syntax for conditionals in data mappings 2
  yamlscript: |
    !yamlscript/v0:
    :when foo()::
     x: 1
    y:
      :when foo()::
       a: b
    z: 3
  build: |
    {:dmap
     [{:Sym =>}
      {:xmap
       [[{:Sym when} {:Lst [{:Sym foo}]}]
        {:Map [{:Str "x"} {:Int 1}]}]}
      {:Str "y"}
      {:dmap
       [[{:xmap
          [[{:Sym when} {:Lst [{:Sym foo}]}]
           {:Map [{:Str "a"} {:Str "b"}]}]}]]}
      {:Str "z"}
      {:Int 3}]}
  clojure: |
    (when (foo) {"x" 1})
    {"y" (when (foo) {"a" "b"}), "z" 3}


- name: String keys in fmaps
  yamlscript: |
    !yamlscript/v0
    case dir:
      'N': north()
      'S': south()
      else: die()
  compose: |
    {:! "yamlscript/v0",
     :%
     [{:= "case dir"}
      {:%
       [{:' "N"}
        {:= "north()"}
        {:' "S"}
        {:= "south()"}
        {:= "else"}
        {:= "die()"}]}]}
  resolve: |
    {:xmap
     [{:expr "case dir"}
      {:fmap
       [{:str "N"}
        {:expr "north()"}
        {:str "S"}
        {:expr "south()"}
        {:expr "else"}
        {:expr "die()"}]}]}
  clojure: |
    (case dir "N" (north) "S" (south) (die))


- name: Let bindings in dmap
  yamlscript: |
    !yamlscript/v0:
    m1 =::
      a: b
    foo =:
      merge m1::
        x: y
    :when true: foo
    z: 1
  clojure: |
    (let
      [m1 {"a" "b"} foo (merge m1 {"x" "y"})]
      (merge (when true foo) {"z" 1}))


- name: Colon call after dollar key
  yamlscript: |
    !yamlscript/v0
    say: ENV.$k:uc1
  clojure: |
    (say (uc1 (get+ ENV k)))


- name: Multiple conditional seq insertion in data mode
  yamlscript: |
    !yamlscript/v0:
    - aaa
    - :when true: bbb
    - ccc
    - :when true: ddd
    - eee
  clojure: |
    (concat ["aaa"] (when true bbb) ["ccc"] (when true ddd) ["eee"])


- name: Multiple code insertions in data mode with mode swap variants
  yamlscript: |
    !yamlscript/v0:
    - aaa
    - ::
        bbb
    - :::
      - bbb
    - :when true:
        bbb
    - :when true::
      - bbb
    - ccc
  resolve: |
    {:seq
     ({:str "aaa"}
      {:map [{:nil ""} {:expr "bbb"}]}
      {:map [{:nil ""} {:seq ({:str "bbb"})}]}
      {:map [{:expr ":when true"} {:expr "bbb"}]}
      {:map [{:expr ":when true"} {:seq ({:str "bbb"})}]}
      {:str "ccc"})}
  clojure: |
    (concat
      ["aaa"]
      (concat bbb ["bbb"] (when true bbb) (when true ["bbb"]))
      ["ccc"])


- name: Two '::' in a data mode sequence
  yamlscript: |
    !yamlscript/v0:
    - 0
    - 1
    - :: -[2 3 4]
    - 5
    - 5
    - ::: [6, 7, 8]
    - 9
    - 10
  clojure: |
    (concat [0 1] [2 3 4] [5 5] [6 7 8] [9 10])


- name: Two '::' in a row in a data mode sequence
  yamlscript: |
    !yamlscript/v0:
    - 1
    - :when x: -[2 3 4]
    - :when y:: [6, 7, 8]
    - 9
  clojure: |
    (concat [1] (concat (when x [2 3 4]) (when y [6 7 8])) [9])


- name: Single '::' in a data mode sequence
  yamlscript: |
    !yamlscript/v0:
    - :when x: -[2 3 4]
  clojure: |
    (concat (when x [2 3 4]))
