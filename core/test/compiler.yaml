# Copyright 2023 Ingy dot Net
# This code is licensed under MIT license (See License for details)

- name: Test label / description
  yamlscript: |
  clojure: |
  TEMPLATE: true


- name: Simple map pair expression
  yamlscript: |
    !yamlscript/v0
    foo: bar
  clojure: |
    (foo bar)


- name: An 'if' statement
  yamlscript: |
    !yamlscript/v0
    if (x > 10):
      foo(x)
      bar(x)
  clojure: |
    (if (> x 10) (foo x) (bar x))


- name: Double quoted string
  yamlscript: |
    !yamlscript/v0
    println: "foo"
  clojure: |
    (println "foo")


- name: Single quoted string
  yamlscript: |
    !yamlscript/v0
    println: 'foo'
  clojure: |
    (println "foo")


- name: Literal style string
  yamlscript: |
    !yamlscript/v0
    println: |-
      foo
  clojure: |
    (println "foo")


- name: Folded style string
  yamlscript: |
    !yamlscript/v0
    println: >-
      foo
  clojure: |
    (println "foo")


- name: rng operator
  yamlscript: |
    !yamlscript/v0
    say: (1 .. 10)
  clojure: |
    (say (rng 1 10))


- name: String concat operator
  yamlscript: |
    !yamlscript/v0
    (a + "-" + b)
  clojure: |
    (_+ a "-" b)


- name: String repeat operator
  yamlscript: |
    !yamlscript/v0
    ("foo" * 3)
  transform: |
    {:Lst [{:Sym _*} {:Str "foo"} {:Int 3}]}
  clojure: |
    (_* "foo" 3)


- name: Nested mappings
  yamlscript: |
    !yamlscript/v0
    foo:
      bar: baz
  resolve: |
    {:ysm [{:ysx "foo"} {:ysm [{:ysx "bar"} {:ysx "baz"}]}]}
  clojure: |
    (foo (bar baz))


- name: String interpolation
  yamlscript: |
    !yamlscript/v0
    say: "Hello $name $(inc 41) $dec(43)!"
  clojure: |
    (say (str "Hello " name " " (inc 41) " " (dec 43) "!"))


- name: Multi-line string interpolation
  yamlscript: |
    !yamlscript/v0
    say: |
      Dear $word(:name),

      Sincerely, $word(:name)
  clojure: |
    (say (str "Dear " (word :name) ",\n\nSincerely, " (word :name) "\n"))


- name: String interpolation escaped $
  yamlscript: |
    !yamlscript/v0
    say: "Hello \\$name"
  clojure: |
    (say "Hello $name")


- name: Automatically call the main function when defined
  yamlscript: |
    !yamlscript/v0
    defn main(name):
      say: "Hello $name"
    x =: 1
  clojure: |
    (defn main [name] (say (str "Hello " name)))
    (def x 1)
    (apply main ARGV)


- name: The => operator
  yamlscript: |
    !yamlscript/v0
    x =: 41
    =>: (x + 1)
  clojure: |
    (def x 41)
    (_+ x 1)


- name: (a + b + c) -> (+ a b c)
  yamlscript: |
    !yamlscript/v0
    =>: (a + b + c)
  clojure: |
    (_+ a b c)


- name: Pre-declare top level functions as needed
  yamlscript: |
    !yamlscript/v0
    defn foo():
      bar: 123
    defn bar(n):
      =>: 321
  clojure: |
    (declare bar)
    (defn foo [] (bar 123))
    (defn bar [n] 321)


- name: The || or operator
  yamlscript: |
    !yamlscript/v0
    =>: (a || b)
  clojure: |
    (or a b)


- name: Multiple && and operators
  yamlscript: |
    !yamlscript/v0
    =>: (a && b && c)
  clojure: |
    (and a b c)


- name: Triplets without parens
  yamlscript: |
    !yamlscript/v0
    =>: a + b
  clojure: |
    (_+ a b)


- name: The => operator inside parens
  yamlscript: |
    !yamlscript/v0
    =>: (=> 123)
  clojure: |
    123


- name: Code generation for let
  yamlscript: |
    !yamlscript/v0
    defn foo(x):
      y =: x + 1
      x =: y * x
      =>: y
  clojure: |
    (defn foo [x] (let [y (_+ x 1) x (_* y x)] y))
  SKIP: true


- name: Lambda definition
  yamlscript: |
    !yamlscript/v0
    =>: \(+ % %2)
  clojure: |
    (fn [_1 _2] (+ _1 _2))


- name: Default args
  yamlscript: |
    !yamlscript/v0
    defn increase(x n=1):
      =>: x + n
  clojure: |
    (defn increase
      ([x] (let [n 1] (increase x n)))
      ([x n] (+ x n)))
  SKIP: true
