# Copyright 2023-2025 Ingy dot Net
# This code is licensed under MIT license (See License for details)

- name: Test label / description
  yamlscript: |
  clojure: |
  TEMPLATE: true


- name: Simple map pair expression
  yamlscript: |
    !yamlscript/v0
    foo: bar
  clojure: |
    (foo bar)


- name: An 'if' statement
  yamlscript: |
    !yamlscript/v0
    if (x > 10):
      foo(x)
      bar(x)
  clojure: |
    (if (> x 10) (foo x) (bar x))


- name: Double quoted string
  yamlscript: |
    !yamlscript/v0
    println: "foo"
  clojure: |
    (println "foo")


- name: Single quoted string
  yamlscript: |
    !yamlscript/v0
    println: 'foo'
  clojure: |
    (println "foo")


- name: Literal style string
  yamlscript: |
    !yamlscript/v0
    println: |-
      foo
  clojure: |
    (println "foo")


- name: Folded style string
  yamlscript: |
    !yamlscript/v0
    println:: >-
      foo
  clojure: |
    (println "foo")


- name: rng operator
  yamlscript: |
    !yamlscript/v0
    say: (1 .. 10)
  clojure: |
    (say (rng 1 10))


- name: String concat operator
  yamlscript: |
    !yamlscript/v0
    (a + "-" + b)
  clojure: |
    (add+ a "-" b)


- name: String repeat operator
  yamlscript: |
    !yamlscript/v0
    ("foo" * 3)
  transform: |
    {:Lst [{:Sym mul+} {:Str "foo"} {:Int 3}]}
  clojure: |
    (mul+ "foo" 3)


- name: Nested mappings
  yamlscript: |
    !yamlscript/v0
    foo:
      bar: baz
  resolve: |
    {:xmap [{:expr "foo"} {:xmap [{:expr "bar"} {:expr "baz"}]}]}
  clojure: |
    (foo (bar baz))


- name: String interpolation
  yamlscript: |
    !yamlscript/v0
    say: "Hello $name $(inc 41) $dec(43)!"
  clojure: |
    (say (str "Hello " name " " (inc 41) " " (dec 43) "!"))


- name: String interpolation followed by a word
  yamlscript: |
    !yamlscript/v0
    say: "Hello${name}world"
  clojure: |
    (say (str "Hello" name "world"))


- name: Multi-line string interpolation
  yamlscript: |
    !yamlscript/v0
    say: |
      Dear $word(:name),

      Sincerely, $word(:name)
  clojure: |
    (say (str "Dear " (word :name) ",\n\nSincerely, " (word :name) "\n"))


- name: String interpolation escaped $
  yamlscript: |
    !yamlscript/v0
    say: "Hello \\$name"
  clojure: |
    (say "Hello $name")


- name: Automatically call the main function when defined
  yamlscript: |
    !yamlscript/v0
    defn main(name):
      say: "Hello $name"
    x =: 1
  clojure: |
    (defn main [name] (say (str "Hello " name)))
    (def x 1)
    (apply main ARGS)


- name: The => operator
  yamlscript: |
    !yamlscript/v0
    x =: 41
    =>: (x + 1)
  clojure: |
    (def x 41)
    (add+ x 1)


- name: (a + b + c) -> (+ a b c)
  yamlscript: |
    !yamlscript/v0
    =>: (a + b + c)
  clojure: |
    (add+ a b c)


- name: Pre-declare top level functions as needed
  yamlscript: |
    !yamlscript/v0
    defn foo():
      bar: 123
    defn bar(n):
      =>: 321
  clojure: |
    (declare bar)
    (defn foo [] (bar 123))
    (defn bar [n] 321)


- name: Pre-declare symbols not called as functions
  yamlscript: |
    !yamlscript/v0
    defn a():
      map b: (1 .. 3)
    defn b():
      c()
    defn c():
      =>: 123
  clojure: |
    (declare b c)
    (defn a [] (map b (rng 1 3)))
    (defn b [] (c))
    (defn c [] 123)


- name: The || or operator
  yamlscript: |
    !yamlscript/v0
    =>: (a || b)
  clojure: |
    (or a b)


- name: Multiple && and operators
  yamlscript: |
    !yamlscript/v0
    =>: (a && b && c)
  clojure: |
    (and a b c)


- name: Triplets without parens
  yamlscript: |
    !yamlscript/v0
    =>: a + b
  clojure: |
    (add+ a b)


- name: Multiple same operators without parens
  yamlscript: |
    !yamlscript/v0
    =>: a + b + c
  clojure: |
    (add+ a b c)


- name: The => operator inside parens
  yamlscript: |
    !yamlscript/v0
    =>: (=> 123)
  clojure: |
    123


- name: Code generation for let
  yamlscript: |
    !yamlscript/v0
    defn foo(x):
      y =: x + 1
      x =: y * x
      =>: x
  clojure: |
    (defn foo [x] (let [y (add+ x 1) x (mul+ y x)] x))


- name: Multiple xmap in let
  yamlscript: |
    !yamlscript/v0
    defn foo(x):
      y =: x + 1
      prn: y
      prn: x
      =>: x
  clojure: |
    (defn foo [x] (let [y (add+ x 1)] (prn y) (prn x) x))


- name: let in let
  yamlscript: |
    !yamlscript/v0
    defn foo(x):
      y =: x + 1
      prn: y
      x =: y * x
      prn: x
      =>: x
  clojure: |
    (defn
      foo
      [x]
      (let [y (add+ x 1)] (prn y) (let [x (mul+ y x)] (prn x) x)))


- name: let not first in defn
  yamlscript: |
    !yamlscript/v0
    defn foo(x):
      prn: x
      y =: x + 1
      prn: y
      =>: x + y
  clojure: |
    (defn foo [x] (prn x) (let [y (add+ x 1)] (prn y) (add+ x y)))


- name: let over lambda
  yamlscript: |
    !yamlscript/v0

    defn lol(x):
      y =: 2 * x
      =>: \(%1 + y)

    say:
      lol(10): 4
  clojure: |
    (defn lol [x] (let [y (mul+ 2 x)] (fn [& [_1]] (add+ _1 y))))
    (say ((lol 10) 4))


- name: Default args
  yamlscript: |
    !yamlscript/v0
    defn increase(x n=1):
      =>: x + n
  clojure: |
    (defn increase ([x n] (add+ x n)) ([x] (increase x 1)))


- name: Call main when program has one top level (defn main ...) form
  yamlscript: |
    !yamlscript/v0
    defn main():
      say: "Hello World"
  clojure: |
    (defn main [] (say "Hello World"))
    (apply main ARGS)


- name: Interpolate variable with - in it
  yamlscript: |
    !yamlscript/v0
    foo-bar =: "World"
    defn say-hi():
      say: "Hello $foo-bar!!"
  clojure: |
    (def foo-bar "World")
    (defn say-hi [] (say (str "Hello " foo-bar "!!")))


- name: Fully qualified symbols
  yamlscript: |
    !yamlscript/v0
    ys::std/say: ys
    foo/bar: baz
  clojure: |
    (ys.std/say ys)
    (foo/bar baz)


- name: Anonymous function
  yamlscript: |
    !yamlscript/v0
    foo =: \(%1 + %4)
  build: |
   {:xmap
    ([{:Sym def} {:Sym foo}]
     {:Lst
      [{:Sym fn}
       {:Vec
        [{:Sym &}
         {:Vec [{:Sym _1} {:Sym _} {:Sym _} {:Sym _4}]}]}
       {:Lst [{:Sym add+} {:Sym _1} {:Sym _4}]}]})}
  clojure: |
    (def foo (fn [& [_1 _ _ _4]] (add+ _1 _4)))


- name: Anonymous function 2
  yamlscript: |
    !yamlscript/v0
    map: \(str ((%1 / %3) + %2)) (1 .. 3)
  clojure: |
    (map (fn [& [_1 _2 _3]] (str (add+ (div+ _1 _3) _2))) (rng 1 3))


- name: Default mapping semantic is a list of xmap
  yamlscript: |
    !yamlscript/v0
    a:
      b c: d
      e: f g
  build: |
    {:xmap
     ({:Sym a}
      {:xmap
       ([{:Sym b} {:Sym c}]
        {:Sym d}
        {:Sym e}
        [{:Sym f} {:Sym g}])})}
  construct: |
    {:Top
     [{:Lst
       [{:Sym a}
        {:Lst [{:Sym b} {:Sym c} {:Sym d}]}
        {:Lst [{:Sym e} {:Sym f} {:Sym g}]}]}]}
  clojure: |
    (a (b c d) (e f g))


- name: let with function call in yaml
  yamlscript: |
    !yamlscript/v0
    defn a():
      b =:
        c: d
      =>: b
  clojure: |
    (defn a [] (let [b (c d)] b))


- name: multi-let with function call in yaml
  yamlscript: |
    !yamlscript/v0
    defn tree(width):
      stars =:  \(inc(%1) * "*")
      spaces =: \(%1 * " ")
      top =:
        join:
          map:
            \(line width, %1): (width..1)
  clojure: |
    (defn
      tree
      [width]
      (let
       [stars
        (fn [& [_1]] (mul+ (inc _1) "*"))
        spaces
        (fn [& [_1]] (mul+ _1 " "))
        top
        (join (map ((fn [& [_1]] (line width _1)) (rng width 1))))]))


- name: Star operator in anonymous function
  yamlscript: |
    !yamlscript/v0
    say: \(inc(%1) * 2)
  clojure: |
    (say (fn [& [_1]] (mul+ (inc _1) 2)))


- name: Function call symbol ends with ?
  yamlscript: |
    !yamlscript/v0
    =>: (a? b)
  clojure: |
    (a? b)


- name: Dot path access
  yamlscript: |
    !yamlscript/v0
    =>: a.5.6.b."c d".'e f'.g(h).i().:j
  build: |
    {:xmap
     [{:Sym =>}
      {:dot
       [{:Sym a}
        {:Int 5}
        {:Int 6}
        {:QSym b}
        {:Str "c d"}
        {:Str "e f"}
        {:Lst [{:Sym g} {:Sym h}]}
        {:Lst [{:Sym i}]}
        {:Key :j}]}]}
     [{:Sym =>}
      {:dot
       [{:Sym a}
        {:Int 5}
        {:Int 6}
        {:Lst [{:Sym quote} {:Sym b}]}
        {:Str "c d"}
        {:Str "e f"}
        {:Lst [{:Sym g} {:Sym h}]}
        {:Lst [{:Sym i}]}
        {:Key :j}]}]}
  transform: |
    {:xmap
     [{:Sym =>}
      {:Lst
       [{:Key :j}
        {:Lst
         [{:Sym i}
          {:Lst
           [{:Sym g}
            {:Lst
             [{:Sym get}
              {:Lst
               [{:Sym get}
                {:Lst
                 [{:Sym get+}
                  {:Lst
                   [{:Sym get+}
                    {:Lst [{:Sym get+} {:Sym a} {:Int 5}]}
                    {:Int 6}]}
                  {:QSym b}]}
                {:Str "c d"}]}
              {:Str "e f"}]}
            {:Sym h}]}]}]}]}
  clojure: |
    (:j (i (g (get (get (get+ (get+ (get+ a 5) 6) 'b) "c d") "e f") h)))


- name: Switching to data mode
  yamlscript: |
    !yamlscript/v0
    d =: load("data.yaml")
    =>: !
      foo: ! d.bar
  clojure: |
    (def d (load "data.yaml"))
    {"foo" (get+ d 'bar)}


- name: Switching to data mode with '::'
  yamlscript: |
    !yamlscript/v0
    d =: load("data.yaml")
    =>::
      foo:: d.bar
  clojure: |
    (def d (load "data.yaml"))
    {"foo" (get+ d 'bar)}


- name: Switch modes with '::' for def/let '=::'
  yamlscript: |
    !yamlscript/v0
    nums =:: [1, 2, 3]
    =>:: {foo:: nums}
  clojure: |
    (def nums [1 2 3])
    {"foo" nums}


- name: rem operator
  yamlscript: |
    !yamlscript/v0
    =>: (a % b)
  clojure: |
    (rem a b)


- name: mod operator
  yamlscript: |
    !yamlscript/v0
    =>: (a %% b)
  clojure: |
    (mod a b)


- name: Error on % in anonymous function
  yamlscript: |
    !yamlscript/v0
    =>: \(inc(%) * 2)
  error: |
    ~~ Invalid symbol '%'. Did you mean '%1'?


- name: Support doc string in defn
  yamlscript: |
    !yamlscript/v0
    defn foo():
      :: This is a doc string
      say: "Hello World"
  build: |
    {:xmap
     [[{:Sym defn} {:Sym foo} {:Str "This is a doc string"} {:Vec []}]
      {:xmap ({:Sym say} {:Str "Hello World"})}]}
  clojure: |
    (defn foo "This is a doc string" [] (say "Hello World"))


- name: Quoted doc string
  yamlscript: |
    !yamlscript/v0
    defn foo():
      :: "This is a doc string"
      say: "Hello World"
  clojure: |
    (defn foo "This is a doc string" [] (say "Hello World"))


- name: Literal doc string
  yamlscript: |
    !yamlscript/v0
    defn foo():
      :: |
        This is
        a doc string
      say: "Hello World"
  clojure: |
    (defn foo "This is\na doc string\n" [] (say "Hello World"))


- name: Error on `a+b`
  yamlscript: |
    !yamlscript/v0
    =>: a+b
  error: |
    Invalid symbol: 'a+b'


- name: Underscore not allowed in symbol - A
  yamlscript: |
    !yamlscript/v0
    =>: (a +_ b)
  error: |
    Invalid symbol: '+_'


- name: Underscore not allowed in symbol - B
  yamlscript: |
    !yamlscript/v0
    =>: (+_ a b)
  error: |
    Invalid symbol: '+_'


- name: Underscore not allowed in symbol - C
  yamlscript: |
    !yamlscript/v0
    =>: (a + b_c)
  error: |
    Invalid symbol: 'b_c'


- name: Regex literal syntax
  yamlscript: |
    !yamlscript/v0
    re1 =: /foo\t"bar".*/
  clojure: |
    (def re1 #"foo\t\"bar\".*")


- name: Regex operator
  yamlscript: |
    !yamlscript/v0
    when (a =~ b): c()
  clojure: |
    (when (=-- a b) (c))


- name: Macros for case, cond, condp
  yamlscript: |
    !yamlscript/v0
    cond:
      (a > b): c
      (a < d): e
      else: f
  clojure: |
    (cond (> a b) c (< a d) e :else f)


- name: Single quoted string
  yamlscript: |
    !yamlscript/v0
    say: -"123" + ' let''s go'
    say: '123 let''s go'
  clojure: |
    (say (add+ "123" " let's go"))
    (say "123 let's go")


- name: String keys with empty values
  yamlscript: |
    !yamlscript/v0
    foo:
      'bar':
      "baz":
      call:
      nada::
      =>:
  clojure: |
    (foo "bar" "baz" (call) (nada nil))


- name: Interpolation in YS strings
  yamlscript: |
    !yamlscript/v0
    =>: 3 * "hi $name\n"
  clojure: |
    (mul+ 3 (str "hi " name "\n"))


- name: Interpolated path lookup
  yamlscript: |
    !yamlscript/v0
    =>: "Hi $(ARGS.0)!!"
  clojure: |
    (str "Hi " (get+ ARGS 0) "!!")


- name: Floating point numbers
  yamlscript: |
    !yamlscript/v0
    =>: -[ -00.00 0.1 -1.2e3 2.3e-4 ]
  clojure: |
    [-0.0 0.1 -1200.0 2.3E-4]


- name: Exponentiation operator
  yamlscript: |
    !yamlscript/v0
    =>: a ** b
    =>: (a ** b) ** c
  clojure: |
    (pow a b)
    (pow (pow a b) c)


- name: Form indicator
  yamlscript: |
    !yamlscript/v0
    a: b
    c |: d()
    e: f
  clojure: |
    (a b)
    c
    (d)
    (e f)


- name: Single underscore as a symbol
  yamlscript: |
    !yamlscript/v0
    defn foo(a _ b):
      =>: a + b
  clojure: |
    (defn foo [a _ b] (add+ a b))


- name: Invalid symbol '_->'
  yamlscript: |
    !yamlscript/v0
    _->: 2
  error: |
    ~~ Invalid symbol: '_->'


- name: Destructuring let
  yamlscript: |
    !yamlscript/v0
    defn foo():
      -[a b c] =: -[1 2 3]
      -{:d d :e e} =: -{:d 4 :e 5}
      =>: a + b + c
  clojure: |
    (defn
      foo
      []
      (let [[a b c] [1 2 3] {:d d, :e e} {:d 4, :e 5}] (add+ a b c)))


- name: Destructuring def
  yamlscript: |
    !yamlscript/v0
    -[a b c] =: -[1 2 3]
  clojure: |
    (+def [a b c] [1 2 3])


- name: Multi-arity defn
  yamlscript: |
    !yamlscript/v0
    defn foo:
      (): 0
      (a): a
      (a b): a + b
  clojure: |
    (defn foo ([] 0) ([a] a) ([a b] (add+ a b)))


- name: Constructing a mapping with code mode
  yamlscript: |
    !yamlscript/v0/data
    a::
      b: c
  construct: |
    {:Top [{:Map [{:Str "a"} {:Lst [{:Sym b} {:Sym c}]}]}]}
  clojure: |
    {"a" (b c)}


- name: Constructing a sequence with code mode
  yamlscript: |
    !yamlscript/v0/data
    - !
      a: b c
  construct: |
    {:Top [{:Vec [{:Lst [{:Sym a} {:Sym b} {:Sym c}]}]}]}
  clojure: |
    [(a b c)]


- name: Invalid number A
  yamlscript: |
    !yamlscript/v0
    =>: 1.2.3
  error: |
    ~~ Invalid number: 1.2.3


- name: Invalid number B
  yamlscript: |
    !yamlscript/v0
    =>: -3/5
#    =>: -3.foo.5
  error: |
    ~~ Invalid number: -3/5
#    ~~ Invalid number: -3.foo.5


- name: Dot grouping in sub-expression
  yamlscript: |
    !yamlscript/v0
    =>: a.3.b + c.4.d
  clojure: |
    (add+ (get+ (get+ a 3) 'b) (get+ (get+ c 4) 'd))


- name: Dot grouping in dot path
  yamlscript: |
    !yamlscript/v0
    =>: a.3.b(c.4.d)
  clojure: |
    (b (get+ a 3) (get+ (get+ c 4) 'd))


- name: Dot grouping in if statement
  yamlscript: |
    !yamlscript/v0
    if a.b: c.d * 3
  clojure: |
    (if (get+ a 'b) (mul+ (get+ c 'd) 3))


- name: Yes expression in sym-paren form
  yamlscript: |
    !yamlscript/v0
    =>: a(b * c)
  clojure: |
    (a (mul+ b c))


- name: Dot groupings in vectors
  yamlscript: |
    !yamlscript/v0
    =>: -[a.3.b(x.y), c.4.d]
  clojure: |
    [(b (get+ a 3) (get+ x 'y)) (get+ (get+ c 4) 'd)]


- name: Fully qualified symbol with paren
  yamlscript: |
    !yamlscript/v0
    =>: a::b/c(d)
  clojure: |
    (a.b/c d)


- name: Dot with var lookup
  yamlscript: |
    !yamlscript/v0
    =>: a.b.$c.d(e)
  clojure: |
    (d (get+ (get+ a 'b) c) e)


- name: Multiple document stream
  yamlscript: |
    foo: 42
    --- !yamlscript/v0
    =>::
      bar:: stream():last.foo:inc
      foo: 123
    ---
    bar: 44
  clojure: |
    {"foo" 42}
    {"bar" (inc (get+ (last (stream)) 'foo)), "foo" 123}
    {"bar" 44}


- name: Dot escaping of YAML syntax
  yamlscript: |
    !yamlscript/v0
    =>: -'foo' * 3
    =>: -"foo" * 3
    =>: -[foo] + [bar]
    =>: -{foo 1} + {bar 2}
    foo: .|| bar
  clojure: |
    (mul+ "foo" 3)
    (mul+ "foo" 3)
    (add+ [foo] [bar])
    (add+ {foo 1} {bar 2})
    (foo || bar)


- name: Plus escaping of YAML syntax
  yamlscript: |
    !yamlscript/v0
    =>: -'foo' * 3
    =>: -"foo" * 3
    =>: -[foo] + [bar]
    =>: -{foo 1} + {bar 2}
    foo: +|| bar
  clojure: |
    (mul+ "foo" 3)
    (mul+ "foo" 3)
    (add+ [foo] [bar])
    (add+ {foo 1} {bar 2})
    (foo || bar)


- name: Plus escaping of YAML syntax
  yamlscript: |
    !yamlscript/v0
    =>: -'foo' * 3
    =>: -"foo" * 3
    =>: -[foo] + [bar]
    =>: -{foo 1} + {bar 2}
    foo: +|| bar
  clojure: |
    (mul+ "foo" 3)
    (mul+ "foo" 3)
    (add+ [foo] [bar])
    (add+ {foo 1} {bar 2})
    (foo || bar)


- name: Star in the middle
  yamlscript: |
    !yamlscript/v0
    =>: a * b
    =>: a(* b)
  clojure: |
    (mul+ a b)
    (a * b)


- name: Quote escaping
  yamlscript: |
    !yamlscript/v0
    =>: \'(1 2 3)
    =>: \'foo
  clojure: |
    '(1 2 3)
    'foo


- name: Char escaping
  yamlscript: |
    !yamlscript/v0
    =>: \'( \\a \\5 \\newline \\tab )
  clojure: |
    '(\a \5 \newline \tab)


- name: Deref with @
  yamlscript: |
    !yamlscript/v0
    =>: .@foo
    =>: ~foo
  clojure: |
    @foo
    ~foo


- name: Allowable symbols
  yamlscript: |
    !yamlscript/v0
    say: a a-b a-b-c
    say: a? a-b? a! a-b!
  clojure: |
    (say a a-b a-b-c)
    (say a? a-b? a! a-b!)


- name: Splats in function calls 1
  yamlscript: |
    !yamlscript/v0
    =>: a(b*)
  clojure: |
    (apply a b)


- name: Splats in function calls 2
  yamlscript: |
    !yamlscript/v0
    =>: a(b c*)
  clojure: |
    (apply a b c)


- name: Splats in function calls 3
  yamlscript: |
    !yamlscript/v0
    =>: a(b c* d)
  clojure: |
    (apply a b (concat c [d]))


- name: Splats in function calls 3
  yamlscript: |
    !yamlscript/v0
    =>: a(b* c d e* f*)
  clojure: |
    (apply a (concat b [c] [d] e f))


- name: Splats in pair expressions
  yamlscript: |
    !yamlscript/v0
    foo: bar* baz
  clojure: |
    (apply foo (concat bar [baz]))


- name: String escapes
  yamlscript: |
    rgx: |
      ^v([0-9]+\.[0-9]+\.[0-9]+)$
  clojure: |
    {"rgx" "^v([0-9]+\\.[0-9]+\\.[0-9]+)$\n"}


- name: Dot dwim args functions
  yamlscript: |
    !yamlscript/v0
    =>: x.drop(3 _).take(5).nth(3)
  clojure: |
    (+nth (+take (drop 3 x) 5) 3)


- name: Bug fix for bare '$' in literal with interpolation
  yamlscript: |
    !yamlscript/v0
    say: |
      $ $x
      $ $y
  clojure: |
    (say (str "$ " x "\n$ " y "\n"))


- name: Support for let operators
  yamlscript: |
    !yamlscript/v0
    defn a():
      x =: nil
      b ||=: 1
      c +=: 2
      d *=: 3
      e -=: 4
      f /=: 5
      =>: b + c + d + e + f
  clojure: |
    (defn
      a
      []
      (let
       [x nil b (or b 1) c (add+ c 2) d (mul+ d 3) e (- e 4) f (div+ f 5)]
       (add+ b c d e f)))


- name: Support the `.=` let operator
  yamlscript: |
    !yamlscript/v0
    defn a():
      b .=: c
      b .=: c.d
      b .=: c.d(e).3.$f.:g.h()
  clojure: |
    (defn
      a
      []
      (let
       [b
        (get+ b 'c)
        b
        (get+ (get+ b 'c) 'd)
        b
        (h (:g (get+ (get+ (d (get+ b 'c) e) 3) f)))]))


- name: Support ops with def (like let)
  yamlscript: |
    !yamlscript/v0
    a =: 1
    a +=: 2
    a .=: b
    a .=: c.d(e)
  clojure: |
    (def a 1)
    (def a (add+ a 2))
    (def a (get+ a 'b))
    (def a (d (get+ a 'c) e))


- name: Dot op when first arg is function call
  yamlscript: |
    !yamlscript/v0
    defn a():
      b .=: c()
      b .=: c(d).e
      :: 42
  clojure: |
    (defn a [] (let [b (c b) b (get+ (c b d) 'e)] (42)))


- name: Dot op when first arg is function with _
  yamlscript: |
    !yamlscript/v0
    defn a():
      b .=: drop(c _)
      b .=: drop(c)
      :: 42
  clojure: |
    (defn a [] (let [b (drop c b) b (+drop b c)] (42)))


- name: Loop without bindings
  yamlscript: |
    !yamlscript/v0
    a =:
      loop:
        a =: read-line()
        if empty?(a):
          recur()
          a
  clojure: |
    (def a (loop [] (let [a (read-line)] (if (empty? a) (recur) a))))


- name: Allow catch with no arguments
  yamlscript: |
    !yamlscript/v0
    try:
      1:
      catch:
        (println "Error")
  clojure: |
    (try (1) (catch Exception _e (println "Error")))


- name: Allow catch with one argument
  yamlscript: |
    !yamlscript/v0
    try:
      1:
      catch err:
        (println "Error")
  clojure: |
    (try (1) (catch Exception err (println "Error")))


- name: Allow underscores in symbols in dot chains
  yamlscript: |
    !yamlscript/v0
    when ENV.FOO_BAR:
      x: y
  build: |
    {:xmap
     [[{:Sym when} {:dot [{:Sym ENV} {:QSym FOO_BAR}]}]
      {:xmap [{:Sym x} {:Sym y}]}]}
  clojure: |
    (when (get+ ENV 'FOO_BAR) (x y))


- name: Support .> debugging operator
  yamlscript: |
    !yamlscript/v0
    =>: foo.>.bar
  clojure: |
    (get+ (clojure.core/DBG foo) 'bar)

- name: Error Clojure style comments
  yamlscript: |
    !yamlscript/v0
    =>: 42          ;; This is not a comment :(
  error: |
    ~~ This is not a comment


- name: Error on folded scalars in code mode
  yamlscript: |
    !yamlscript/v0
    =>: >
      42
  error: |
    ~~ Folded scalars not allowed in code mode


- name: Double quoted strings with capture group vars
  yamlscript: |
    !yamlscript/v0
    =>: "$1 $foo $2"
    =>: -"$1$foo$2"
  clojure: |
    (str "$1 " foo " $2")
    (str "$1" foo "$2")


- name: Inline comments
  yamlscript: |
    !yamlscript/v0
    say: text
      .foo   \"get foo"
      .bar   \"get bar"
      .baz   \"get baz"
  clojure: |
    (say (get+ (get+ (get+ text 'foo) 'bar) 'baz))


- name: Inline comments in parenthesized expression
  yamlscript: |
    !yamlscript/v0
    (1 + \"Inline comment" 2)
  clojure: |
    (add+ 1 2)


- name: Escape pound and colon in ysexpr strings
  yamlscript: |
    !yamlscript/v0
    say: -'foo \# bar :\ baz'
    say: -"foo \# bar :\ baz"
  clojure: |
    (say "foo # bar : baz")
    (say "foo # bar : baz")


- name: Define functions with unnamed variable args
  yamlscript: |
    !yamlscript/v0
    defn foo(*): nil
    defn bar(*xs): nil
    defn baz(a b *xs): nil
    defn boo(a b *): nil
  clojure: |
    (defn foo [& _] nil)
    (defn bar [& xs] nil)
    (defn baz [a b & xs] nil)
    (defn boo [a b & _] nil)


- name: Variable and default args in function definitions
  yamlscript: |
    !yamlscript/v0
    defn foo(a b=1 *c): nil
  clojure: |
    (defn foo ([a b & c] nil) ([a] (foo a 1)))


- name: Multi-arity defn with variable args
  yamlscript: |
    !yamlscript/v0
    defn add:
      (): 0
      (x): x
      (x y): x + y
      (x y *xs): reduce(add (add x y) xs)
  clojure: |
    (defn
      add
      ([] 0)
      ([x] x)
      ([x y] (add+ x y))
      ([x y & xs] (reduce add (add x y) xs)))


- name: Define a private function
  yamlscript: |
    !yamlscript/v0
    defn- foo(): nil
  clojure: |
    (defn- foo [] nil)


- name: Check case compiles like cond
  yamlscript: |
    !yamlscript/v0
    case x:
      1: a
      2: b
      3: c
      else: d
  clojure: |
    (case x 1 a 2 b 3 c d)


- name: Arg swap using underscore
  yamlscript: |
    !yamlscript/v0
    reduce _ [] (1 .. 10):
      fn(a b):
        conj a: b * 10
  clojure: |
    (reduce (fn [a b] (conj a (mul+ b 10))) [] (rng 1 10))


- name: Form with dot on LHS
  yamlscript: |
    !yamlscript/v0
    foo .: bar
    foo.: bar()
    foo.: bar.baz
    foo : .bar
    foo: .bar()
    foo: .bar.baz
  clojure: |
    (get+ foo 'bar)
    (bar foo)
    (get+ (get+ foo 'bar) 'baz)
    (get+ foo 'bar)
    (bar foo)
    (get+ (get+ foo 'bar) 'baz)


- name: Dot chain call with splat
  yamlscript: |
    !yamlscript/v0
    =>: (1 .. 10).bar(*)
    =>: foo.bar.baz(*)
  clojure: |
    (apply bar (rng 1 10))
    (apply baz (get+ foo 'bar))


- name: YeS expression over a pair
  yamlscript: |
    !yamlscript/v0
    foo +: bar.baz
    a ||: b &&& c
  clojure: |
    (add+ foo (get+ bar 'baz))
    (or a (and? b c))


- name: Support .? truey operator
  yamlscript: |
    !yamlscript/v0
    if foo.?: bar
  clojure: |
    (if (ys.std/truey? foo) bar)


- name: Support .# count operator
  yamlscript: |
    !yamlscript/v0
    if foo.#: bar
  clojure: |
    (if (clojure.core/count foo) bar)


- name: Support parenthesized .# count operator
  yamlscript: |
    !yamlscript/v0
    if (foo.# == 3): bar
    if foo.# == 3: bar
    if (== foo.# 3): bar
  clojure: |
    (if (= (clojure.core/count foo) 3) bar)
    (if (= (clojure.core/count foo) 3) bar)
    (if (= (clojure.core/count foo) 3) bar)


- name: Use _ for %1 in anonymous function
  yamlscript: |
    !yamlscript/v0
    =>: \(add(_ 1) 2)
    =>: \(%2 + _ + _ + %1)
  clojure: |
    (fn [& [_1]] ((add _1 1) 2))
    (fn [& [_1 _2]] (add+ _2 _1 _1 _1))


- name: Support .-- .++ operators
  yamlscript: |
    !yamlscript/v0
    when a.-- > b.++: c
  clojure: |
    (when (> (ys.std/dec+ a) (ys.std/inc+ b)) c)


- name: Anonymous function with only a regex
  yamlscript: |
    !yamlscript/v0
    a.map(\(/.../))
  clojure: |
    (+map a (fn [& [_1]] (re-find #"..." _1)))


- name: Support slurp arg in fn
  yamlscript: |
    !yamlscript/v0
    a =:
      fn(*args): nil
    b =:
      fn(*): nil
    c =:
      fn c(*): nil
  clojure: |
    (def a (fn [& args] nil))
    (def b (fn [& _] nil))
    (def c (fn c [& _] nil))


- name: YeS in LHS or YeS pair
  yamlscript: |
    !yamlscript/v0
    a && b ||: c
  clojure: |
    (or (and a b) c)


- name: YeS in LHS or YeS pair w/ map on RHS
  yamlscript: |
    !yamlscript/v0
    a && b ||:
      c: d
  clojure: |
    (or (and a b) (c d))


- name: Seq destruct without []
  yamlscript: |
    !yamlscript/v0
    a b c =: -[1 2 3]
  clojure: |
    (+def [a b c] [1 2 3])


- name: Colon chain calls
  yamlscript: |
    !yamlscript/v0
    =>: a:b
    =>: a.b:c
    =>: a.b.:c:d
    =>: a.5:b
    =>: a(5):b
    =>: -{}:a
    =>: -[]:a
    =>: a:b?
    =>: a:b!
    =>: a:b+
    =>: a:b/c
    =>: a:b/c:d
    =>: a.++:b
    =>: a.--:b
    =>: a.#:b
  clojure: |
    (b a)
    (c (get+ a 'b))
    (d (:c (get+ a 'b)))
    (b (get+ a 5))
    (b (a 5))
    (a {})
    (a [])
    (b? a)
    (b! a)
    (b+ a)
    (b/c a)
    (d (b/c a))
    (b (ys.std/inc+ a))
    (b (ys.std/dec+ a))
    (b (clojure.core/count a))


- name: Bare mode tags
  yamlscript: |
    - !!map
      foo: bar
    - !!seq
      - 1
      - 2
    - !!str 42
    - !!int "42"
    - !!float '42'
    - !!bool |-
      true
    - !!null ''
  resolve: |
    {:seq
     ({:map [{:str "foo"} {:str "bar"}]}
      {:seq ({:int "1"} {:int "2"})}
      {:str "42"}
      {:int "42"}
      {:flt "42"}
      {:bln "true"}
      {:nil ""})}
  clojure: |
    [{"foo" "bar"} [1 2] "42" 42 42.0 true nil]


- name: Bare mode tag error for !!map
  yamlscript: |
    - !!map 42
  error: |
    Invalid tag for bare mode scalar: !!map

- name: Bare mode tag error for !!map
  yamlscript: |
    - !!map []
  error: |
    Invalid tag for bare mode sequence: !!map

- name: Bare mode tag error for !!bool
  yamlscript: |
    - !!bool []
  error: |
    Invalid tag for bare mode sequence: !!bool

- name: Bare mode tag error for !!bool
  yamlscript: |
    - !!bool tRUE
  error: |
    Invalid value for bare mode scalar with tag !!bool: 'tRUE'

- name: Tag !data in code mode
  yamlscript: |
    !yamlscript/v0
    =>: !data
      foo: bar
  clojure: |
    {"foo" "bar"}


- name: Tag !code in data mode
  yamlscript: |
    !yamlscript/v0/data
    - !code
      foo: bar
  clojure: |
    [(foo bar)]


- name: Method tag in code mode
  yamlscript: |
    !yamlscript/v0
    a =: !:WWW
      inc: 41
    b =: !:WWW 42

  resolve: |
    {:xmap
     [{:def "a ="}
      {:xmap [{:expr "inc"} {:expr "41"}], :! ":WWW"}
      {:def "b ="}
      {:expr "42", :! ":WWW"}]}
  clojure: |
    (def a (WWW (inc 41)))
    (def b (WWW 42))


- name: Merge key in data mode
  yamlscript: |
    !yamlscript/v0/data
    <<:: -[{:a 1 :b 2}]
    :a: 3
  clojure: |
    (+merge {:-<< [{:a 1, :b 2}], :a 3})


- name: Tag method call with data mode switch to data mode
  yamlscript: |
    !yamlscript/v0
    array =: !:vec:
    - 1
    - 2
    - 3
    - 4
  clojure: |
    (def array (vec [1 2 3 4]))


- name: Tag method call with data mode switch to code mode
  yamlscript: |
    !yamlscript/v0:
    foo: !:merge: -[{:a 1 :b 2} {:a 3}]
  clojure: |
    {"foo" (merge [{:a 1, :b 2} {:a 3}])}


- name: Conditional seq insertion in data mode
  yamlscript: |
    !yamlscript/v0:
    - foo
    - :when rand(2) > 1::
      - bar
    - baz
  clojure: |
    (concat ["foo"] (when (> (rand 2) 1) ["bar"]) ["baz"])


- name: Fix bug in seq insertion in data mode
  yamlscript: |
    !yamlscript/v0:
    - x: null
  build: |
    {:Vec [{:Map [{:Str "x"} {:Nil nil}]}]}
  clojure: |
    [{"x" nil}]


- name: Conditional map insertion in data mode bug
  yamlscript: |
    !yamlscript/v0:
    - foo: 1
      :when x:: {bar: 2}
      x: 3
  clojure: |
    [(merge {"foo" 1} (merge (when x {"bar" 2}) {"x" 3}))]


- name: Tag function on let
  yamlscript: |
    !yamlscript/v0
    defn xyz():
      foo =: !:WWW
        bar: 42
  clojure: |
    (defn xyz [] (let [foo (WWW (bar 42))]))


- name: Fully qualified tag function call
  yamlscript: |
    !yamlscript/v0
    a =: !:b/c d
  clojure: |
    (def a (b/c d))


- name: Chained tag calls
  yamlscript: |
    !yamlscript/v0
    a =: !:b:d/e:f g
    a =: !:b*:d/e:f* g
    a =: !:b*:d/e:f*: g
  clojure: |
    (def a (f (d/e (b g))))
    (def a (apply f (d/e (apply b g))))
    (def a (apply f (d/e (apply b "g"))))
