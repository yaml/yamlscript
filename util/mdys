#!/usr/bin/env ys-0

input-dir =: atom(nil)

DNE =: "<!-- DO NOT EDIT â€” THIS FILE WAS GENERATED -->\n\n"

defn main(input-file):
  dir =: fs-dirname(input-file):fs-abs
  reset! input-dir: dir

  mdys-lib =: "$dir/mdys.ys"
  when fs-f(mdys-lib):
    load: mdys-lib

  markdown =: input-file:process:trim

  markdown =:
    replace markdown:
      /^(---\n(?s:.*?)\n---\n)\n*/
      "$1\n$DNE"

  markdown =:
    if markdown.str/includes?(DNE):
      markdown
      (DNE + markdown)

  say: markdown:trimr

defn process(input-file):
  sections =: input-file:load-mdys
  sections:
    .generate-markdown()
    .triml()

fenced-re =: /(?sm)(?:^```mdys:\S+\n.*?\n```\n)/
defn load-mdys(file):
  text =: file:fs-abs:read
  texts =: text.split(fenced-re)
  fenced =: text.re-seq(fenced-re) || []
  fenced =: fenced:V.conj('')
  all =: texts
    .interleave(fenced)
    .remove(empty?)
    .remove(mdys-section-regex('ignore'))
  code =: all.filter(mdys-section-regex('eval'))
  all =: all.remove(mdys-section-regex('eval'))
  concat: code all

defn mdys-section-regex(type):
  qr("^```mdys:$type\n((?s).*?)```\n")

defn generate-markdown(data):
  markdown =: ''
  loop [section *sections] data, markdown markdown:
    if section:
      then:
        markdown +=:
          if section =~ /^```mdys:/:
            format-mdys: section
            trim: section
        recur sections:
          if empty?(markdown):
            markdown
            (markdown + "\n")
      else: markdown

defn format-mdys(text):
  type =: (text =~ /^```mdys:(\S+)/).1
  text .=: replace(/^```.*\n/ '')
  text =: text.replace(/```\n\z/ '')
  cond:
    type == 'eval':
      do:
        eval: text
        =>: ''
    type.starts?(':'):
      do:
        func =: value("mdys-$(type.subs(1))") ||
          die("Can't find function 'mdys-$type'")
        call func: text
    else:
      data =: text:ys/compile:eval-string
      func =: value("mdys-$type") ||
        die("Can't find function 'mdys-$type'")
      call func: data

defn get-path(file):
  if-not fs-abs?(file):
    fs-abs _ file: input-dir:deref
    else: file

defn mdys-include(data):
  input-file =: data.file:get-path
  markdown =: process(input-file):lines
  yank =: data.yank
  markdown =:
    if yank:
      remove fn([s] re-find(qr(yank) s)): markdown
      else: markdown
  =>: +"\n" + join("\n" markdown) + "\n"

defn indent(text n=2):
  replace text:
    /(?m)^(?=.)/
    (' ' * n)

# vim: ft=yaml sw=2 lisp:
